import "./chunk-FAW2VN4A.js";

// node_modules/@fancyapps/ui/dist/carousel/carousel.esm.js
var t = (t2) => "object" == typeof t2 && null !== t2 && t2.constructor === Object && "[object Object]" === Object.prototype.toString.call(t2);
var e = (i2, ...s2) => {
  const n2 = s2.length;
  for (let o2 = 0; o2 < n2; o2++) {
    const n3 = s2[o2] || {};
    Object.entries(n3).forEach(([s3, n4]) => {
      const o3 = Array.isArray(n4) ? [] : {};
      i2[s3] || Object.assign(i2, { [s3]: o3 }), t(n4) ? Object.assign(i2[s3], e(o3, n4)) : Array.isArray(n4) ? Object.assign(i2, { [s3]: [...n4] }) : Object.assign(i2, { [s3]: n4 });
    });
  }
  return i2;
};
var i = function(t2, e2) {
  let i2 = true;
  return (...s2) => {
    i2 && (i2 = false, t2(...s2), setTimeout(() => {
      i2 = true;
    }, e2));
  };
};
var s = (t2, e2) => {
  let i2 = [];
  return t2.childNodes.forEach((t3) => {
    t3.nodeType !== Node.ELEMENT_NODE || e2 && !t3.matches(e2) || i2.push(t3);
  }), i2;
};
var n = function(t2) {
  return new DOMParser().parseFromString(t2, "text/html").body.firstChild;
};
var o = (t2, e2 = 1e4) => (t2 = parseFloat(t2 + "") || 0, Math.round((t2 + Number.EPSILON) * e2) / e2);
var a = (t2) => `${t2 || ""}`.split(" ").filter((t3) => !!t3);
var r = (t2, e2) => {
  a(e2).forEach((e3) => {
    t2 && t2.classList.add(e3);
  });
};
var h = (t2, e2) => {
  a(e2).forEach((e3) => {
    t2 && t2.classList.remove(e3);
  });
};
var l = (t2, e2, i2) => {
  a(e2).forEach((e3) => {
    t2 && t2.classList.toggle(e3, i2 || false);
  });
};
var c = '<div class="f-spinner"><svg viewBox="0 0 50 50"><circle cx="25" cy="25" r="20"></circle><circle cx="25" cy="25" r="20"></circle></svg></div>';
var d = function(t2, e2) {
  return t2.split(".").reduce((t3, e3) => "object" == typeof t3 ? t3[e3] : void 0, e2);
};
var u = class {
  constructor(t2 = {}) {
    Object.defineProperty(this, "options", { enumerable: true, configurable: true, writable: true, value: t2 }), Object.defineProperty(this, "events", { enumerable: true, configurable: true, writable: true, value: /* @__PURE__ */ new Map() }), this.setOptions(t2);
    for (const t3 of Object.getOwnPropertyNames(Object.getPrototypeOf(this)))
      t3.startsWith("on") && "function" == typeof this[t3] && (this[t3] = this[t3].bind(this));
  }
  setOptions(t2) {
    this.options = t2 ? e({}, this.constructor.defaults, t2) : {};
    for (const [t3, e2] of Object.entries(this.option("on") || {}))
      this.on(t3, e2);
  }
  option(t2, ...e2) {
    let i2 = d(t2, this.options);
    return i2 && "function" == typeof i2 && (i2 = i2.call(this, this, ...e2)), i2;
  }
  optionFor(t2, e2, i2, ...s2) {
    let n2 = d(e2, t2);
    var o2;
    "string" != typeof (o2 = n2) || isNaN(o2) || isNaN(parseFloat(o2)) || (n2 = parseFloat(n2)), "true" === n2 && (n2 = true), "false" === n2 && (n2 = false), n2 && "function" == typeof n2 && (n2 = n2.call(this, this, t2, ...s2));
    let a2 = d(e2, this.options);
    return a2 && "function" == typeof a2 ? n2 = a2.call(this, this, t2, ...s2, n2) : void 0 === n2 && (n2 = a2), void 0 === n2 ? i2 : n2;
  }
  cn(t2) {
    const e2 = this.options.classes;
    return e2 && e2[t2] || "";
  }
  localize(t2, e2 = []) {
    t2 = String(t2).replace(/\{\{(\w+).?(\w+)?\}\}/g, (t3, e3, i2) => {
      let s2 = "";
      return i2 ? s2 = this.option(`${e3[0] + e3.toLowerCase().substring(1)}.l10n.${i2}`) : e3 && (s2 = this.option(`l10n.${e3}`)), s2 || (s2 = t3), s2;
    });
    for (let i2 = 0; i2 < e2.length; i2++)
      t2 = t2.split(e2[i2][0]).join(e2[i2][1]);
    return t2 = t2.replace(/\{\{(.*)\}\}/, (t3, e3) => e3);
  }
  on(t2, e2) {
    let i2 = [];
    "string" == typeof t2 ? i2 = t2.split(" ") : Array.isArray(t2) && (i2 = t2), this.events || (this.events = /* @__PURE__ */ new Map()), i2.forEach((t3) => {
      let i3 = this.events.get(t3);
      i3 || (this.events.set(t3, []), i3 = []), i3.includes(e2) || i3.push(e2), this.events.set(t3, i3);
    });
  }
  off(t2, e2) {
    let i2 = [];
    "string" == typeof t2 ? i2 = t2.split(" ") : Array.isArray(t2) && (i2 = t2), i2.forEach((t3) => {
      const i3 = this.events.get(t3);
      if (Array.isArray(i3)) {
        const t4 = i3.indexOf(e2);
        t4 > -1 && i3.splice(t4, 1);
      }
    });
  }
  emit(t2, ...e2) {
    [...this.events.get(t2) || []].forEach((t3) => t3(this, ...e2)), "*" !== t2 && this.emit("*", t2, ...e2);
  }
};
Object.defineProperty(u, "version", { enumerable: true, configurable: true, writable: true, value: "5.0.7" }), Object.defineProperty(u, "defaults", { enumerable: true, configurable: true, writable: true, value: {} });
var g = class extends u {
  constructor(t2 = {}) {
    super(t2), Object.defineProperty(this, "plugins", { enumerable: true, configurable: true, writable: true, value: {} });
  }
  attachPlugins(t2 = {}) {
    const e2 = /* @__PURE__ */ new Map();
    for (const [i2, s2] of Object.entries(t2)) {
      const t3 = this.option(i2), n2 = this.plugins[i2];
      n2 || false === t3 ? n2 && false === t3 && (n2.detach(), delete this.plugins[i2]) : e2.set(i2, new s2(this, t3 || {}));
    }
    for (const [t3, i2] of e2)
      this.plugins[t3] = i2, i2.attach();
    this.emit("attachPlugins");
  }
  detachPlugins() {
    for (const t2 of Object.values(this.plugins))
      t2.detach();
    return this.plugins = {}, this.emit("detachPlugins"), this;
  }
};
var p = function(t2, e2) {
  return !(!t2 || t2 === document.body || e2 && t2 === e2) && (function(t3) {
    if (!(t3 && t3 instanceof Element && t3.offsetParent))
      return false;
    const e3 = t3.scrollHeight > t3.clientHeight, i2 = window.getComputedStyle(t3).overflowY, s2 = -1 !== i2.indexOf("hidden"), n2 = -1 !== i2.indexOf("visible");
    return e3 && !s2 && !n2;
  }(t2) ? t2 : p(t2.parentElement, e2));
};
var f = class {
  constructor(t2) {
    Object.defineProperty(this, "pageX", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "pageY", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "clientX", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "clientY", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "id", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "time", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "nativePointer", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.nativePointer = t2, this.pageX = t2.pageX, this.pageY = t2.pageY, this.clientX = t2.clientX, this.clientY = t2.clientY, this.id = self.Touch && t2 instanceof Touch ? t2.identifier : -1, this.time = Date.now();
  }
};
var m = { passive: false };
var b = class {
  constructor(t2, { start: e2 = () => true, move: i2 = () => {
  }, end: s2 = () => {
  } }) {
    Object.defineProperty(this, "element", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "startCallback", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "moveCallback", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "endCallback", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "currentPointers", { enumerable: true, configurable: true, writable: true, value: [] }), Object.defineProperty(this, "startPointers", { enumerable: true, configurable: true, writable: true, value: [] }), this.element = t2, this.startCallback = e2, this.moveCallback = i2, this.endCallback = s2;
    for (const t3 of ["onPointerStart", "onTouchStart", "onMove", "onTouchEnd", "onPointerEnd", "onWindowBlur"])
      this[t3] = this[t3].bind(this);
    this.element.addEventListener("mousedown", this.onPointerStart, m), this.element.addEventListener("touchstart", this.onTouchStart, m), this.element.addEventListener("touchmove", this.onMove, m), this.element.addEventListener("touchend", this.onTouchEnd), this.element.addEventListener("touchcancel", this.onTouchEnd);
  }
  onPointerStart(t2) {
    if (!t2.buttons || 0 !== t2.button)
      return;
    const e2 = new f(t2);
    this.currentPointers.some((t3) => t3.id === e2.id) || this.triggerPointerStart(e2, t2) && (window.addEventListener("mousemove", this.onMove), window.addEventListener("mouseup", this.onPointerEnd), window.addEventListener("blur", this.onWindowBlur));
  }
  onTouchStart(t2) {
    for (const e2 of Array.from(t2.changedTouches || []))
      this.triggerPointerStart(new f(e2), t2);
    window.addEventListener("blur", this.onWindowBlur);
  }
  onMove(t2) {
    const e2 = this.currentPointers.slice(), i2 = "changedTouches" in t2 ? Array.from(t2.changedTouches || []).map((t3) => new f(t3)) : [new f(t2)], s2 = [];
    for (const t3 of i2) {
      const e3 = this.currentPointers.findIndex((e4) => e4.id === t3.id);
      e3 < 0 || (s2.push(t3), this.currentPointers[e3] = t3);
    }
    s2.length && this.moveCallback(t2, this.currentPointers.slice(), e2);
  }
  onPointerEnd(t2) {
    t2.buttons > 0 && 0 !== t2.button || (this.triggerPointerEnd(t2, new f(t2)), window.removeEventListener("mousemove", this.onMove), window.removeEventListener("mouseup", this.onPointerEnd), window.removeEventListener("blur", this.onWindowBlur));
  }
  onTouchEnd(t2) {
    for (const e2 of Array.from(t2.changedTouches || []))
      this.triggerPointerEnd(t2, new f(e2));
  }
  triggerPointerStart(t2, e2) {
    return !!this.startCallback(e2, t2, this.currentPointers.slice()) && (this.currentPointers.push(t2), this.startPointers.push(t2), true);
  }
  triggerPointerEnd(t2, e2) {
    const i2 = this.currentPointers.findIndex((t3) => t3.id === e2.id);
    i2 < 0 || (this.currentPointers.splice(i2, 1), this.startPointers.splice(i2, 1), this.endCallback(t2, e2, this.currentPointers.slice()));
  }
  onWindowBlur() {
    this.clear();
  }
  clear() {
    for (; this.currentPointers.length; ) {
      const t2 = this.currentPointers[this.currentPointers.length - 1];
      this.currentPointers.splice(this.currentPointers.length - 1, 1), this.startPointers.splice(this.currentPointers.length - 1, 1), this.endCallback(new Event("touchend", { bubbles: true, cancelable: true, clientX: t2.clientX, clientY: t2.clientY }), t2, this.currentPointers.slice());
    }
  }
  stop() {
    this.element.removeEventListener("mousedown", this.onPointerStart, m), this.element.removeEventListener("touchstart", this.onTouchStart, m), this.element.removeEventListener("touchmove", this.onMove, m), this.element.removeEventListener("touchend", this.onTouchEnd), this.element.removeEventListener("touchcancel", this.onTouchEnd), window.removeEventListener("mousemove", this.onMove), window.removeEventListener("mouseup", this.onPointerEnd), window.removeEventListener("blur", this.onWindowBlur);
  }
};
function v(t2, e2) {
  return e2 ? Math.sqrt(Math.pow(e2.clientX - t2.clientX, 2) + Math.pow(e2.clientY - t2.clientY, 2)) : 0;
}
function y(t2, e2) {
  return e2 ? { clientX: (t2.clientX + e2.clientX) / 2, clientY: (t2.clientY + e2.clientY) / 2 } : t2;
}
var x;
!function(t2) {
  t2[t2.Init = 0] = "Init", t2[t2.Error = 1] = "Error", t2[t2.Ready = 2] = "Ready", t2[t2.Panning = 3] = "Panning", t2[t2.Mousemove = 4] = "Mousemove", t2[t2.Destroy = 5] = "Destroy";
}(x || (x = {}));
var w = ["a", "b", "c", "d", "e", "f"];
var P = { content: null, width: "auto", height: "auto", panMode: "drag", touch: true, dragMinThreshold: 3, lockAxis: false, mouseMoveFactor: 1, mouseMoveFriction: 0.12, zoom: true, pinchToZoom: true, panOnlyZoomed: "auto", minScale: 1, maxScale: 2, friction: 0.25, dragFriction: 0.35, decelFriction: 0.05, click: "toggleZoom", dblClick: false, wheel: "zoom", wheelLimit: 7, spinner: true, bounds: "auto", infinite: false, rubberband: true, bounce: true, maxVelocity: 75, transformParent: false, classes: { content: "f-panzoom__content", isLoading: "is-loading", canZoomIn: "can-zoom_in", canZoomOut: "can-zoom_out", isDraggable: "is-draggable", isDragging: "is-dragging", inFullscreen: "in-fullscreen", htmlHasFullscreen: "with-panzoom-in-fullscreen" }, l10n: { PANUP: "Move up", PANDOWN: "Move down", PANLEFT: "Move left", PANRIGHT: "Move right", ZOOMIN: "Zoom in", ZOOMOUT: "Zoom out", TOGGLEZOOM: "Toggle zoom level", TOGGLE1TO1: "Toggle zoom level", ITERATEZOOM: "Toggle zoom level", ROTATECCW: "Rotate counterclockwise", ROTATECW: "Rotate clockwise", FLIPX: "Flip horizontally", FLIPY: "Flip vertically", FITX: "Fit horizontally", FITY: "Fit vertically", RESET: "Reset", TOGGLEFS: "Toggle fullscreen" } };
var S = (t2) => t2 && null !== t2 && t2 instanceof Element && "nodeType" in t2;
var T = { a: 1, b: 0, c: 0, d: 1, e: 0, f: 0 };
var M = null;
var O = null;
var E = class extends g {
  get isTouchDevice() {
    return null === O && (O = window.matchMedia("(hover: none)").matches), O;
  }
  get isMobile() {
    return null === M && (M = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent)), M;
  }
  get panMode() {
    return "mousemove" !== this.options.panMode || this.isTouchDevice ? "drag" : "mousemove";
  }
  get panOnlyZoomed() {
    const t2 = this.options.panOnlyZoomed;
    return "auto" === t2 ? this.isTouchDevice : t2;
  }
  get isInfinite() {
    return this.option("infinite");
  }
  get angle() {
    return 180 * Math.atan2(this.current.b, this.current.a) / Math.PI || 0;
  }
  get targetAngle() {
    return 180 * Math.atan2(this.target.b, this.target.a) / Math.PI || 0;
  }
  get scale() {
    const { a: t2, b: e2 } = this.current;
    return Math.sqrt(t2 * t2 + e2 * e2) || 1;
  }
  get targetScale() {
    const { a: t2, b: e2 } = this.target;
    return Math.sqrt(t2 * t2 + e2 * e2) || 1;
  }
  get minScale() {
    return this.option("minScale") || 1;
  }
  get fullScale() {
    const { contentRect: t2 } = this;
    return t2.fullWidth / t2.fitWidth || 1;
  }
  get maxScale() {
    return this.fullScale * (this.option("maxScale") || 1) || 1;
  }
  get coverScale() {
    const { containerRect: t2, contentRect: e2 } = this, i2 = Math.max(t2.height / e2.fitHeight, t2.width / e2.fitWidth) || 1;
    return Math.min(this.fullScale, i2);
  }
  get isScaling() {
    return Math.abs(this.targetScale - this.scale) > 1e-5 && !this.isResting;
  }
  get isContentLoading() {
    const t2 = this.content;
    return !!(t2 && t2 instanceof HTMLImageElement) && !t2.complete;
  }
  get isResting() {
    if (this.isBouncingX || this.isBouncingY)
      return false;
    for (const t2 of w) {
      const e2 = "e" == t2 || "f" === t2 ? 1e-3 : 1e-5;
      if (Math.abs(this.target[t2] - this.current[t2]) > e2)
        return false;
    }
    return !(!this.ignoreBounds && !this.checkBounds().inBounds);
  }
  constructor(t2, e2 = {}, i2 = {}) {
    var s2;
    if (super(e2), Object.defineProperty(this, "pointerTracker", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "resizeObserver", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "updateTimer", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "clickTimer", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "rAF", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "isTicking", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "friction", { enumerable: true, configurable: true, writable: true, value: 0 }), Object.defineProperty(this, "ignoreBounds", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "isBouncingX", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "isBouncingY", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "clicks", { enumerable: true, configurable: true, writable: true, value: 0 }), Object.defineProperty(this, "trackingPoints", { enumerable: true, configurable: true, writable: true, value: [] }), Object.defineProperty(this, "wheelDelta", { enumerable: true, configurable: true, writable: true, value: 0 }), Object.defineProperty(this, "prevWheelDelta", { enumerable: true, configurable: true, writable: true, value: 0 }), Object.defineProperty(this, "prevWheelTime", { enumerable: true, configurable: true, writable: true, value: 0 }), Object.defineProperty(this, "prevMouseMoveEvent", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "state", { enumerable: true, configurable: true, writable: true, value: x.Init }), Object.defineProperty(this, "isDragging", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "container", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "content", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "spinner", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "containerRect", { enumerable: true, configurable: true, writable: true, value: { width: 0, height: 0, innerWidth: 0, innerHeight: 0 } }), Object.defineProperty(this, "contentRect", { enumerable: true, configurable: true, writable: true, value: { top: 0, right: 0, bottom: 0, left: 0, fullWidth: 0, fullHeight: 0, fitWidth: 0, fitHeight: 0, width: 0, height: 0 } }), Object.defineProperty(this, "dragStart", { enumerable: true, configurable: true, writable: true, value: { x: 0, y: 0, top: 0, left: 0, time: 0 } }), Object.defineProperty(this, "dragOffset", { enumerable: true, configurable: true, writable: true, value: { x: 0, y: 0, time: 0 } }), Object.defineProperty(this, "current", { enumerable: true, configurable: true, writable: true, value: Object.assign({}, T) }), Object.defineProperty(this, "target", { enumerable: true, configurable: true, writable: true, value: Object.assign({}, T) }), Object.defineProperty(this, "velocity", { enumerable: true, configurable: true, writable: true, value: { a: 0, b: 0, c: 0, d: 0, e: 0, f: 0 } }), Object.defineProperty(this, "lockedAxis", { enumerable: true, configurable: true, writable: true, value: false }), !t2)
      throw new Error("No Element found");
    if (this.container = t2, this.initContent(), this.attachPlugins(Object.assign(Object.assign({}, E.Plugins), i2)), this.emit("init"), this.isContentLoading) {
      const e3 = this.content;
      if (this.option("spinner")) {
        t2.classList.add(this.cn("isLoading"));
        const i3 = n(c);
        t2.contains(e3) ? this.spinner = (null === (s2 = e3.parentElement) || void 0 === s2 ? void 0 : s2.insertBefore(i3, e3)) || null : this.spinner = t2.appendChild(i3);
      }
      this.emit("beforeLoad"), e3.addEventListener("load", this.onLoad), e3.addEventListener("error", this.onError);
    } else
      queueMicrotask(() => {
        this.enable();
      });
  }
  initContent() {
    const { container: t2 } = this;
    let e2 = this.option("content") || t2.querySelector(`.${this.cn("content")}`);
    if (e2 || (e2 = t2.querySelector("img") || t2.firstElementChild, e2 && e2.classList.add(this.cn("content"))), !e2)
      throw new Error("No content found");
    this.content = e2;
  }
  onLoad() {
    this.spinner && (this.spinner.remove(), this.spinner = null), this.option("spinner") && this.container.classList.remove(this.cn("isLoading")), this.emit("afterLoad"), this.state === x.Init && this.enable();
  }
  onError() {
    this.state !== x.Destroy && (this.spinner && (this.spinner.remove(), this.spinner = null), this.stop(), this.detachEvents(), this.state = x.Error, this.emit("error"));
  }
  attachObserver() {
    var t2;
    const e2 = () => Math.abs(this.containerRect.width - this.container.getBoundingClientRect().width) > 0.1 || Math.abs(this.containerRect.height - this.container.getBoundingClientRect().height) > 0.1;
    this.resizeObserver || void 0 === window.ResizeObserver || (this.resizeObserver = new ResizeObserver(() => {
      this.updateTimer || (e2() ? (this.onResize(), this.isMobile && (this.updateTimer = setTimeout(() => {
        e2() && this.onResize(), this.updateTimer = null;
      }, 500))) : this.updateTimer && (clearTimeout(this.updateTimer), this.updateTimer = null));
    })), null === (t2 = this.resizeObserver) || void 0 === t2 || t2.observe(this.container);
  }
  detachObserver() {
    var t2;
    null === (t2 = this.resizeObserver) || void 0 === t2 || t2.disconnect();
  }
  attachEvents() {
    const { container: t2 } = this;
    t2.addEventListener("click", this.onClick, { passive: false, capture: false }), t2.addEventListener("wheel", this.onWheel, { passive: false }), this.pointerTracker = new b(t2, { start: this.onPointerDown, move: this.onPointerMove, end: this.onPointerUp }), document.addEventListener("mousemove", this.onMouseMove);
  }
  detachEvents() {
    var t2;
    const { container: e2 } = this;
    e2.removeEventListener("click", this.onClick, { passive: false, capture: false }), e2.removeEventListener("wheel", this.onWheel, { passive: false }), null === (t2 = this.pointerTracker) || void 0 === t2 || t2.stop(), this.pointerTracker = null, document.removeEventListener("mousemove", this.onMouseMove), document.removeEventListener("keydown", this.onKeydown, true), this.clickTimer && (clearTimeout(this.clickTimer), this.clickTimer = null), this.updateTimer && (clearTimeout(this.updateTimer), this.updateTimer = null);
  }
  animate() {
    this.setTargetForce();
    const t2 = this.option("maxVelocity");
    for (const e2 of w)
      this.friction ? (this.velocity[e2] *= 1 - this.friction, t2 && !this.isScaling && (this.velocity[e2] = Math.max(Math.min(this.velocity[e2], t2), -1 * t2)), this.current[e2] += this.velocity[e2]) : this.current[e2] = this.target[e2];
    this.setTransform(), this.setEdgeForce(), !this.isResting || this.isDragging ? this.rAF = requestAnimationFrame(() => this.animate()) : this.stop("current");
  }
  setTargetForce() {
    for (const t2 of w)
      "e" === t2 && this.isBouncingX || "f" === t2 && this.isBouncingY || (this.velocity[t2] = (1 / (1 - this.friction) - 1) * (this.target[t2] - this.current[t2]));
  }
  checkBounds(t2 = 0, e2 = 0) {
    const { current: i2 } = this, s2 = i2.e + t2, n2 = i2.f + e2, o2 = this.getBounds(), { x: a2, y: r2 } = o2, h2 = a2.min, l2 = a2.max, c2 = r2.min, d2 = r2.max;
    let u2 = 0, g2 = 0;
    return h2 !== 1 / 0 && s2 < h2 ? u2 = h2 - s2 : l2 !== 1 / 0 && s2 > l2 && (u2 = l2 - s2), c2 !== 1 / 0 && n2 < c2 ? g2 = c2 - n2 : d2 !== 1 / 0 && n2 > d2 && (g2 = d2 - n2), Math.abs(u2) < 1e-3 && (u2 = 0), Math.abs(g2) < 1e-3 && (g2 = 0), Object.assign(Object.assign({}, o2), { xDiff: u2, yDiff: g2, inBounds: !u2 && !g2 });
  }
  clampTargetBounds() {
    const { target: t2 } = this, { x: e2, y: i2 } = this.getBounds();
    e2.min !== 1 / 0 && (t2.e = Math.max(t2.e, e2.min)), e2.max !== 1 / 0 && (t2.e = Math.min(t2.e, e2.max)), i2.min !== 1 / 0 && (t2.f = Math.max(t2.f, i2.min)), i2.max !== 1 / 0 && (t2.f = Math.min(t2.f, i2.max));
  }
  calculateContentDim(t2 = this.current) {
    const { content: e2, contentRect: i2 } = this, { fitWidth: s2, fitHeight: n2, fullWidth: o2, fullHeight: a2 } = i2;
    let r2 = o2, h2 = a2;
    if (this.option("zoom") || 0 !== this.angle) {
      const i3 = !(e2 instanceof HTMLImageElement) && ("none" === window.getComputedStyle(e2).maxWidth || "none" === window.getComputedStyle(e2).maxHeight), l2 = i3 ? o2 : s2, c2 = i3 ? a2 : n2, d2 = this.getMatrix(t2), u2 = new DOMPoint(0, 0).matrixTransform(d2), g2 = new DOMPoint(0 + l2, 0).matrixTransform(d2), p2 = new DOMPoint(0 + l2, 0 + c2).matrixTransform(d2), f2 = new DOMPoint(0, 0 + c2).matrixTransform(d2), m2 = Math.abs(p2.x - u2.x), b2 = Math.abs(p2.y - u2.y), v2 = Math.abs(f2.x - g2.x), y2 = Math.abs(f2.y - g2.y);
      r2 = Math.max(m2, v2), h2 = Math.max(b2, y2);
    }
    return { contentWidth: r2, contentHeight: h2 };
  }
  setEdgeForce() {
    if (this.ignoreBounds || this.isDragging || "mousemove" === this.panMode || this.targetScale < this.scale)
      return this.isBouncingX = false, void (this.isBouncingY = false);
    const { target: t2 } = this, { x: e2, y: i2, xDiff: s2, yDiff: n2 } = this.checkBounds();
    const o2 = this.option("maxVelocity");
    let a2 = this.velocity.e, r2 = this.velocity.f;
    0 !== s2 ? (this.isBouncingX = true, s2 * a2 <= 0 ? a2 += 0.14 * s2 : (a2 = 0.14 * s2, e2.min !== 1 / 0 && (this.target.e = Math.max(t2.e, e2.min)), e2.max !== 1 / 0 && (this.target.e = Math.min(t2.e, e2.max))), o2 && (a2 = Math.max(Math.min(a2, o2), -1 * o2))) : this.isBouncingX = false, 0 !== n2 ? (this.isBouncingY = true, n2 * r2 <= 0 ? r2 += 0.14 * n2 : (r2 = 0.14 * n2, i2.min !== 1 / 0 && (this.target.f = Math.max(t2.f, i2.min)), i2.max !== 1 / 0 && (this.target.f = Math.min(t2.f, i2.max))), o2 && (r2 = Math.max(Math.min(r2, o2), -1 * o2))) : this.isBouncingY = false, this.isBouncingX && (this.velocity.e = a2), this.isBouncingY && (this.velocity.f = r2);
  }
  enable() {
    const { content: t2 } = this, e2 = new DOMMatrixReadOnly(window.getComputedStyle(t2).transform);
    for (const t3 of w)
      this.current[t3] = this.target[t3] = e2[t3];
    this.updateMetrics(), this.attachObserver(), this.attachEvents(), this.state = x.Ready, this.emit("ready");
  }
  onClick(t2) {
    var e2;
    this.isDragging && (null === (e2 = this.pointerTracker) || void 0 === e2 || e2.clear(), this.trackingPoints = [], this.startDecelAnim());
    const i2 = t2.target;
    if (!i2 || t2.defaultPrevented)
      return;
    if (i2 && i2.hasAttribute("disabled"))
      return t2.preventDefault(), void t2.stopPropagation();
    if ((() => {
      const t3 = window.getSelection();
      return t3 && "Range" === t3.type;
    })() && !i2.closest("button"))
      return;
    const s2 = i2.closest("[data-panzoom-action]"), n2 = i2.closest("[data-panzoom-change]"), o2 = s2 || n2, a2 = o2 && S(o2) ? o2.dataset : null;
    if (a2) {
      const e3 = a2.panzoomChange, i3 = a2.panzoomAction;
      if ((e3 || i3) && t2.preventDefault(), e3) {
        let t3 = {};
        try {
          t3 = JSON.parse(e3);
        } catch (t4) {
          console && console.warn("The given data was not valid JSON");
        }
        return void this.applyChange(t3);
      }
      if (i3)
        return void (this[i3] && this[i3]());
    }
    if (Math.abs(this.dragOffset.x) > 3 || Math.abs(this.dragOffset.y) > 3)
      return t2.preventDefault(), void t2.stopPropagation();
    const r2 = this.content.getBoundingClientRect();
    if (this.dragStart.time && !this.canZoomOut() && (Math.abs(r2.x - this.dragStart.x) > 2 || Math.abs(r2.y - this.dragStart.y) > 2))
      return;
    this.dragStart.time = 0;
    const h2 = (e3) => {
      !this.option("zoom") || Math.abs(this.velocity.a) > 0.3 || e3 && "string" == typeof e3 && /(iterateZoom)|(toggle(Zoom|Full|Cover|Max)|(zoomTo(Fit|Cover|Max)))/.test(e3) && "function" == typeof this[e3] && (t2.preventDefault(), this[e3]({ event: t2 }));
    }, l2 = this.option("click", t2), c2 = this.option("dblClick", t2);
    c2 ? (this.clicks++, 1 == this.clicks && (this.clickTimer = setTimeout(() => {
      1 === this.clicks ? (this.emit("click", t2), !t2.defaultPrevented && l2 && h2(l2)) : (this.emit("dblClick", t2), t2.defaultPrevented || h2(c2)), this.clicks = 0, this.clickTimer = null;
    }, 350))) : (this.emit("click", t2), !t2.defaultPrevented && l2 && h2(l2));
  }
  addTrackingPoint(t2) {
    const e2 = this.trackingPoints.filter((t3) => t3.time > Date.now() - 100);
    e2.push(t2), this.trackingPoints = e2;
  }
  onPointerDown(t2, e2, i2) {
    var s2;
    this.dragOffset = { x: 0, y: 0, time: 0 }, this.trackingPoints = [];
    const n2 = this.content.getBoundingClientRect();
    if (this.dragStart = { x: n2.x, y: n2.y, top: n2.top, left: n2.left, time: Date.now() }, this.clickTimer)
      return false;
    if ("mousemove" === this.panMode && this.targetScale > 1)
      return t2.preventDefault(), t2.stopPropagation(), false;
    if (!i2.length) {
      const e3 = t2.composedPath()[0];
      if (["A", "TEXTAREA", "OPTION", "INPUT", "SELECT", "VIDEO"].includes(e3.nodeName) || e3.closest("[contenteditable]") || e3.closest("[data-selectable]") || e3.closest("[data-panzoom-change]") || e3.closest("[data-panzoom-action]"))
        return false;
      null === (s2 = window.getSelection()) || void 0 === s2 || s2.removeAllRanges();
    }
    return "mousedown" === t2.type && t2.preventDefault(), o(this.targetScale, 1e3) === o(this.minScale, 1e3) ? (this.stop(), this.target.e = this.current.e, this.target.f = this.current.f) : this.stop("target"), this.isDragging = true, this.addTrackingPoint(e2), this.emit("touchStart", t2), true;
  }
  onPointerMove(t2, e2, i2) {
    if (false === this.option("touch", t2))
      return;
    if (!this.isDragging)
      return;
    if (e2.length < 2 && this.panOnlyZoomed && o(this.targetScale) <= o(this.minScale))
      return;
    if (this.emit("touchMove", t2), t2.defaultPrevented)
      return;
    this.addTrackingPoint(e2[0]);
    const { content: s2 } = this, n2 = y(i2[0], i2[1]), a2 = y(e2[0], e2[1]);
    let r2 = 0, h2 = 0;
    if (e2.length > 1) {
      const t3 = s2.getBoundingClientRect();
      r2 = n2.clientX - t3.left - 0.5 * t3.width, h2 = n2.clientY - t3.top - 0.5 * t3.height;
    }
    const l2 = v(i2[0], i2[1]), c2 = v(e2[0], e2[1]);
    let d2 = l2 ? c2 / l2 : 1, u2 = a2.clientX - n2.clientX, g2 = a2.clientY - n2.clientY;
    this.dragOffset.x += u2, this.dragOffset.y += g2, this.dragOffset.time = Date.now() - this.dragStart.time;
    let f2 = o(this.targetScale) === o(this.minScale) && this.option("lockAxis");
    if (f2 && !this.lockedAxis)
      if ("xy" === f2 || "y" === f2 || "touchmove" === t2.type) {
        if (Math.abs(this.dragOffset.x) < 6 && Math.abs(this.dragOffset.y) < 6)
          return void t2.preventDefault();
        const e3 = Math.abs(180 * Math.atan2(this.dragOffset.y, this.dragOffset.x) / Math.PI);
        this.lockedAxis = e3 > 45 && e3 < 135 ? "y" : "x", this.dragOffset.x = 0, this.dragOffset.y = 0, u2 = 0, g2 = 0;
      } else
        this.lockedAxis = f2;
    if (p(t2.target, this.content) && (f2 = "x", this.dragOffset.y = 0), f2 && "xy" !== f2 && this.lockedAxis !== f2 && o(this.targetScale) === o(this.minScale))
      return;
    t2.cancelable && t2.preventDefault(), this.container.classList.add(this.cn("isDragging"));
    const m2 = this.checkBounds(u2, g2);
    this.option("rubberband") ? ("x" !== this.isInfinite && (m2.xDiff > 0 && u2 < 0 || m2.xDiff < 0 && u2 > 0) && (u2 *= Math.max(0, 0.5 - Math.abs(0.75 / this.contentRect.fitWidth * m2.xDiff))), "y" !== this.isInfinite && (m2.yDiff > 0 && g2 < 0 || m2.yDiff < 0 && g2 > 0) && (g2 *= Math.max(0, 0.5 - Math.abs(0.75 / this.contentRect.fitHeight * m2.yDiff)))) : (m2.xDiff && (u2 = 0), m2.yDiff && (g2 = 0));
    const b2 = this.targetScale, x2 = this.minScale, w2 = this.maxScale;
    b2 < 0.5 * x2 && (d2 = Math.max(d2, x2)), b2 > 1.5 * w2 && (d2 = Math.min(d2, w2)), "y" === this.lockedAxis && o(b2) === o(x2) && (u2 = 0), "x" === this.lockedAxis && o(b2) === o(x2) && (g2 = 0), this.applyChange({ originX: r2, originY: h2, panX: u2, panY: g2, scale: d2, friction: this.option("dragFriction"), ignoreBounds: true });
  }
  onPointerUp(t2, e2, i2) {
    if (i2.length)
      return this.dragOffset.x = 0, this.dragOffset.y = 0, void (this.trackingPoints = []);
    this.container.classList.remove(this.cn("isDragging")), this.isDragging && (this.addTrackingPoint(e2), this.panOnlyZoomed && this.contentRect.width - this.contentRect.fitWidth < 1 && this.contentRect.height - this.contentRect.fitHeight < 1 && (this.trackingPoints = []), p(t2.target, this.content) && "y" === this.lockedAxis && (this.trackingPoints = []), this.emit("touchEnd", t2), this.isDragging = false, this.lockedAxis = false, this.state !== x.Destroy && (t2.defaultPrevented || this.startDecelAnim()));
  }
  startDecelAnim() {
    this.rAF && (cancelAnimationFrame(this.rAF), this.rAF = null), this.isBouncingX = false, this.isBouncingY = false;
    for (const t3 of w)
      this.velocity[t3] = 0, this.target[t3] = this.current[t3];
    h(this.container, "is-scaling"), h(this.container, "is-animating"), this.isTicking = false;
    const { trackingPoints: t2 } = this, e2 = t2[0], i2 = t2[t2.length - 1];
    let s2 = 0, n2 = 0, a2 = 0;
    i2 && e2 && (s2 = i2.clientX - e2.clientX, n2 = i2.clientY - e2.clientY, a2 = i2.time - e2.time);
    let r2 = 0, l2 = 0, c2 = 0, d2 = 0, u2 = this.option("decelFriction");
    const g2 = this.targetScale;
    if ((g2 < this.minScale - 1e-5 || g2 > this.maxScale + 1e-5) && (u2 = 0.35), a2 > 0) {
      c2 = Math.abs(s2) > 3 ? s2 / (a2 / 30) : 0, d2 = Math.abs(n2) > 3 ? n2 / (a2 / 30) : 0;
      const t3 = this.option("maxVelocity");
      t3 && (c2 = Math.max(Math.min(c2, t3), -1 * t3), d2 = Math.max(Math.min(d2, t3), -1 * t3));
    }
    c2 && (r2 = c2 / (1 / (1 - u2) - 1)), d2 && (l2 = d2 / (1 / (1 - u2) - 1)), ("y" === this.option("lockAxis") || "xy" === this.option("lockAxis") && "y" === this.lockedAxis && o(g2) === this.minScale) && (r2 = c2 = 0), ("x" === this.option("lockAxis") || "xy" === this.option("lockAxis") && "x" === this.lockedAxis && o(g2) === this.minScale) && (l2 = d2 = 0);
    const p2 = this.dragOffset.x, f2 = this.dragOffset.y, m2 = this.option("dragMinThreshold") || 0;
    Math.abs(p2) < m2 && Math.abs(f2) < m2 && (r2 = l2 = 0, c2 = d2 = 0), this.applyChange({ panX: r2, panY: l2, friction: u2 }), this.emit("decel", c2, d2, p2, f2);
  }
  onWheel(t2) {
    const e2 = Date.now(), i2 = Math.max(-1, Math.min(1, -t2.deltaY || -t2.deltaX || -t2.detail));
    if (this.prevWheelTime && e2 - this.prevWheelTime < 200 && this.prevWheelDelta !== i2)
      return void t2.preventDefault();
    if (this.prevWheelDelta = i2, this.prevWheelTime = e2, this.emit("wheel", t2, i2), "mousemove" === this.panMode)
      return;
    if (t2.defaultPrevented)
      return;
    const s2 = this.option("wheel");
    "pan" === s2 ? (t2.preventDefault(), this.panOnlyZoomed && !this.canZoomOut() || this.applyChange({ panY: 100 * i2, bounce: false })) : "zoom" === s2 && false !== this.option("zoom") && this.zoomWithWheel(t2);
  }
  onMouseMove(t2) {
    this.panWithMouse(t2);
  }
  onKeydown(t2) {
    "Escape" === t2.key && this.toggleFS();
  }
  onResize() {
    this.updateMetrics(), this.checkBounds().inBounds || this.requestTick();
  }
  setTransform() {
    this.emit("beforeTransform");
    const { current: t2, target: e2, content: i2, contentRect: s2 } = this, n2 = Object.assign({}, T);
    for (const i3 of w) {
      const s3 = "e" == i3 || "f" === i3 ? 1e3 : 1e5;
      n2[i3] = o(t2[i3], s3), Math.abs(e2[i3] - t2[i3]) < ("e" == i3 || "f" === i3 ? 0.51 : 1e-3) && (this.current[i3] = e2[i3]);
    }
    const { a: a2, b: r2, c: h2, d: l2, e: c2, f: d2 } = n2, u2 = `matrix(${a2}, ${r2}, ${h2}, ${l2}, ${c2}, ${d2})`, g2 = (this.option("transformParent") ? i2.parentElement : null) || i2;
    if (g2.style.transform === u2)
      return;
    g2.style.transform = u2;
    const { contentWidth: p2, contentHeight: f2 } = this.calculateContentDim();
    s2.width = p2, s2.height = f2, this.emit("afterTransform");
  }
  updateMetrics(t2 = false) {
    if (!this || this.state === x.Destroy)
      return;
    const { container: e2, containerRect: i2, content: s2 } = this, n2 = i2.innerWidth, a2 = i2.innerHeight, r2 = e2.getBoundingClientRect(), h2 = getComputedStyle(this.container), l2 = r2.width, c2 = r2.height, d2 = parseFloat(h2.paddingTop) + parseFloat(h2.paddingBottom), u2 = parseFloat(h2.paddingLeft) + parseFloat(h2.paddingRight);
    this.containerRect = { width: l2, height: c2, innerWidth: l2 - u2, innerHeight: c2 - d2 };
    let g2 = this.option("width") || "auto", p2 = this.option("height") || "auto";
    "auto" === g2 && (g2 = parseFloat(s2.dataset.width || "") || ((t3) => {
      let e3 = 0;
      return e3 = t3 instanceof HTMLImageElement ? t3.naturalWidth : t3 instanceof SVGElement ? t3.width.baseVal.value : t3.offsetWidth, Math.max(e3, t3.scrollWidth);
    })(s2)), "auto" === p2 && (p2 = parseFloat(s2.dataset.height || "") || ((t3) => {
      let e3 = 0;
      return e3 = t3 instanceof HTMLImageElement ? t3.naturalHeight : t3 instanceof SVGElement ? t3.height.baseVal.value : t3.offsetHeight, Math.max(e3, t3.scrollHeight);
    })(s2));
    const f2 = (this.option("transformParent") ? s2.parentElement : null) || s2, m2 = f2.getAttribute("style") || "";
    f2.style.setProperty("transform", "none", "important"), s2 instanceof HTMLImageElement && (f2.style.width = "", f2.style.height = ""), f2.offsetHeight;
    const b2 = s2.getBoundingClientRect();
    let v2 = b2.width, y2 = b2.height, w2 = 0, P2 = 0;
    if (s2 instanceof HTMLImageElement && ({ width: v2, height: y2, top: w2, left: P2 } = ((t3, e3, i3, s3) => {
      const n3 = i3 / s3;
      return n3 > t3 / e3 ? (i3 = t3, s3 = t3 / n3) : (i3 = e3 * n3, s3 = e3), { width: i3, height: s3, top: 0.5 * (e3 - s3), left: 0.5 * (t3 - i3) };
    })(b2.width, b2.height, g2, p2)), this.contentRect = Object.assign(Object.assign({}, this.contentRect), { top: b2.top - r2.top + w2, bottom: r2.bottom - b2.bottom + w2, left: b2.left - r2.left + P2, right: r2.right - b2.right + P2, fitWidth: v2, fitHeight: y2, width: v2, height: y2, fullWidth: g2, fullHeight: p2 }), f2.style.cssText = m2, s2 instanceof HTMLImageElement && (f2.style.width = `${v2}px`, f2.style.height = `${y2}px`), this.setTransform(), true !== t2) {
      let t3 = "";
      Math.abs(l2 - n2) > 1 && (t3 += "x"), Math.abs(c2 - a2) > 1 && (t3 += "y"), t3 && this.emit("refresh", t3);
    }
    this.ignoreBounds || (o(this.targetScale) < o(this.minScale) ? this.zoomTo(this.minScale, { friction: 0 }) : this.targetScale > this.maxScale ? this.zoomTo(this.maxScale, { friction: 0 }) : this.state === x.Init || this.checkBounds().inBounds || this.requestTick()), this.updateControls();
  }
  getBounds() {
    const t2 = this.option("bounds");
    if ("auto" !== t2)
      return t2;
    const { contentWidth: e2, contentHeight: i2 } = this.calculateContentDim(this.target);
    let s2 = 0, n2 = 0, a2 = 0, r2 = 0;
    const h2 = this.option("infinite");
    if (true === h2 || this.lockedAxis && h2 === this.lockedAxis)
      s2 = -1 / 0, a2 = 1 / 0, n2 = -1 / 0, r2 = 1 / 0;
    else {
      let { containerRect: t3, contentRect: h3 } = this, l2 = o(this.contentRect.fitWidth * this.targetScale, 1e3), c2 = o(this.contentRect.fitHeight * this.targetScale, 1e3), { innerWidth: d2, innerHeight: u2 } = t3;
      if (this.containerRect.width === l2 && (d2 = t3.width), this.containerRect.width === c2 && (u2 = t3.height), e2 > d2) {
        a2 = 0.5 * (e2 - d2), s2 = -1 * a2;
        let t4 = 0.5 * (h3.right - h3.left);
        s2 += t4, a2 += t4;
      }
      if (this.contentRect.fitWidth > d2 && e2 < d2 && (s2 -= 0.5 * (this.contentRect.fitWidth - d2), a2 -= 0.5 * (this.contentRect.fitWidth - d2)), i2 > u2) {
        r2 = 0.5 * (i2 - u2), n2 = -1 * r2;
        let t4 = 0.5 * (h3.bottom - h3.top);
        n2 += t4, r2 += t4;
      }
      this.contentRect.fitHeight > u2 && i2 < u2 && (s2 -= 0.5 * (this.contentRect.fitHeight - u2), a2 -= 0.5 * (this.contentRect.fitHeight - u2));
    }
    return { x: { min: s2, max: a2 }, y: { min: n2, max: r2 } };
  }
  updateControls() {
    const t2 = this, e2 = t2.container;
    let i2 = { toggleMax: this.targetScale - this.minScale < 0.5 * (this.maxScale - this.minScale) ? this.maxScale : this.minScale, toggleCover: this.targetScale - this.minScale < 0.5 * (this.coverScale - this.minScale) ? this.coverScale : this.minScale, toggleZoom: this.targetScale - this.minScale < 0.5 * (this.fullScale - this.minScale) ? this.fullScale : this.minScale }[this.option("click") || ""] || this.minScale, s2 = t2.canZoomIn(), n2 = t2.canZoomOut(), a2 = "drag" === this.panMode, r2 = n2 && a2;
    this.targetScale <= this.minScale && !this.panOnlyZoomed && (r2 = true), (this.contentRect.width - this.contentRect.fitWidth > -1 || this.contentRect.height - this.contentRect.fitHeight > -1) && (r2 = true), this.contentRect.width * this.targetScale < this.contentRect.fitWidth && (r2 = false), "mousemove" === this.panMode && (r2 = false);
    let h2 = s2 && o(i2) > o(this.targetScale), c2 = !h2 && !r2 && n2 && o(i2) < o(this.targetScale);
    l(e2, this.cn("canZoomIn"), h2), l(e2, this.cn("canZoomOut"), c2), l(e2, this.cn("isDraggable"), r2);
    for (const t3 of e2.querySelectorAll('[data-panzoom-action="zoomIn"]'))
      s2 ? (t3.removeAttribute("disabled"), t3.removeAttribute("tabindex")) : (t3.setAttribute("disabled", ""), t3.setAttribute("tabindex", "-1"));
    for (const t3 of e2.querySelectorAll('[data-panzoom-action="zoomOut"]'))
      n2 ? (t3.removeAttribute("disabled"), t3.removeAttribute("tabindex")) : (t3.setAttribute("disabled", ""), t3.setAttribute("tabindex", "-1"));
    for (const i3 of e2.querySelectorAll('[data-panzoom-action="toggleZoom"],[data-panzoom-action="iterateZoom"]')) {
      s2 = t2.targetScale < t2.fullScale - 0.1, s2 || n2 ? (i3.removeAttribute("disabled"), i3.removeAttribute("tabindex")) : (i3.setAttribute("disabled", ""), i3.setAttribute("tabindex", "-1"));
      const e3 = i3.querySelector("g");
      e3 && (e3.style.display = t2.targetScale > 0.9 * t2.fullScale ? "none" : "");
    }
  }
  panTo({ x: t2 = this.target.e, y: e2 = this.target.f, scale: i2 = this.targetScale, friction: s2 = this.option("friction"), angle: n2 = 0, originX: o2 = 0, originY: a2 = 0, flipX: r2 = false, flipY: h2 = false, ignoreBounds: l2 = false }) {
    this.state !== x.Destroy && this.applyChange({ panX: t2 - this.target.e, panY: e2 - this.target.f, scale: i2 / this.targetScale, angle: n2, originX: o2, originY: a2, friction: s2, flipX: r2, flipY: h2, ignoreBounds: l2 });
  }
  applyChange({ panX: t2 = 0, panY: e2 = 0, scale: i2 = 1, angle: s2 = 0, originX: n2 = -this.current.e, originY: a2 = -this.current.f, friction: r2 = this.option("friction"), flipX: h2 = false, flipY: l2 = false, ignoreBounds: c2 = false, bounce: d2 = this.option("bounce") }) {
    const u2 = this.state;
    if (u2 === x.Init || u2 === x.Destroy)
      return;
    this.rAF && (cancelAnimationFrame(this.rAF), this.rAF = null), this.isBouncingX = false, this.isBouncingY = false;
    for (const t3 of w)
      this.velocity[t3] = 0;
    this.friction = r2 || 0, this.ignoreBounds = c2;
    const { current: g2 } = this, p2 = g2.e, f2 = g2.f, m2 = this.getMatrix(this.target);
    let b2 = new DOMMatrix().translate(p2, f2).translate(n2, a2).translate(t2, e2);
    if (this.option("zoom")) {
      if (!c2) {
        const t3 = this.targetScale, e3 = this.minScale, s3 = this.maxScale;
        t3 * i2 < e3 && (i2 = e3 / t3), t3 * i2 > s3 && (i2 = s3 / t3);
      }
      b2 = b2.scale(i2);
    }
    b2 = b2.translate(-n2, -a2).translate(-p2, -f2).multiply(m2), s2 && (b2 = b2.rotate(s2)), h2 && (b2 = b2.scale(-1, 1)), l2 && (b2 = b2.scale(1, -1));
    for (const t3 of w)
      "a" != t3 && "d" != t3 || !(b2[t3] > this.minScale + 1e-5 || b2[t3] < this.minScale - 1e-5) ? this.target[t3] = o(b2[t3], 1e3) : this.target[t3] = b2[t3];
    (this.targetScale < this.scale || Math.abs(i2 - 1) > 0.1 || "mousemove" === this.panMode || false === d2) && !c2 && this.clampTargetBounds(), this.isResting || (this.state = x.Panning, this.requestTick());
  }
  stop(t2 = false) {
    if (this.state === x.Init || this.state === x.Destroy)
      return;
    const e2 = this.isTicking;
    this.rAF && (cancelAnimationFrame(this.rAF), this.rAF = null), this.isBouncingX = false, this.isBouncingY = false;
    for (const e3 of w)
      this.velocity[e3] = 0, "current" === t2 ? this.current[e3] = this.target[e3] : "target" === t2 && (this.target[e3] = this.current[e3]);
    this.setTransform(), h(this.container, "is-scaling"), h(this.container, "is-animating"), this.isTicking = false, this.state = x.Ready, e2 && (this.emit("endAnimation"), this.updateControls());
  }
  requestTick() {
    this.isTicking || (this.emit("startAnimation"), this.updateControls(), r(this.container, "is-animating"), this.isScaling && r(this.container, "is-scaling")), this.isTicking = true, this.rAF || (this.rAF = requestAnimationFrame(() => this.animate()));
  }
  panWithMouse(t2, e2 = this.option("mouseMoveFriction")) {
    if (this.prevMouseMoveEvent = t2, "mousemove" !== this.panMode || !t2)
      return;
    if (o(this.targetScale) <= o(this.minScale))
      return;
    this.emit("mouseMove", t2);
    const { container: i2, containerRect: s2, contentRect: n2 } = this, a2 = s2.width, r2 = s2.height, h2 = i2.getBoundingClientRect(), l2 = (t2.clientX || 0) - h2.left, c2 = (t2.clientY || 0) - h2.top;
    let { contentWidth: d2, contentHeight: u2 } = this.calculateContentDim(this.target);
    const g2 = this.option("mouseMoveFactor");
    g2 > 1 && (d2 !== a2 && (d2 *= g2), u2 !== r2 && (u2 *= g2));
    let p2 = 0.5 * (d2 - a2) - l2 / a2 * 100 / 100 * (d2 - a2);
    p2 += 0.5 * (n2.right - n2.left);
    let f2 = 0.5 * (u2 - r2) - c2 / r2 * 100 / 100 * (u2 - r2);
    f2 += 0.5 * (n2.bottom - n2.top), this.applyChange({ panX: p2 - this.target.e, panY: f2 - this.target.f, friction: e2 });
  }
  zoomWithWheel(t2) {
    if (this.state === x.Destroy || this.state === x.Init)
      return;
    const e2 = Math.abs(t2.deltaY) < 100 && Math.abs(t2.deltaX) < 100 ? 25 : 50, i2 = Math.max(-1, Math.min(1, -t2.deltaY || -t2.deltaX || -t2.detail)), s2 = this.targetScale, n2 = this.maxScale, o2 = this.minScale;
    let a2 = s2 * (100 + i2 * e2) / 100;
    a2 < o2 && s2 <= o2 ? (this.wheelDelta += Math.abs(i2), a2 = o2) : a2 > n2 && s2 >= n2 ? (this.wheelDelta += Math.abs(i2), a2 = n2) : (this.wheelDelta = 0, a2 = Math.max(Math.min(a2, n2), o2)), this.wheelDelta > this.option("wheelLimit") || (t2.preventDefault(), a2 !== s2 && this.zoomTo(a2, { event: t2 }));
  }
  canZoomIn() {
    return this.option("zoom") && (this.contentRect.width < this.contentRect.fitWidth || this.targetScale < this.maxScale - 1e-5);
  }
  canZoomOut() {
    return this.option("zoom") && this.targetScale > this.minScale + 1e-5;
  }
  zoomIn(t2 = 1.25, e2) {
    this.zoomTo(this.targetScale * t2, e2);
  }
  zoomOut(t2 = 0.8, e2) {
    this.zoomTo(this.targetScale * t2, e2);
  }
  zoomToFit(t2) {
    this.zoomTo("fit", t2);
  }
  zoomToCover(t2) {
    this.zoomTo("cover", t2);
  }
  zoomToFull(t2) {
    this.zoomTo("full", t2);
  }
  zoomToMax(t2) {
    this.zoomTo("max", t2);
  }
  toggleZoom(t2) {
    this.zoomTo(this.targetScale - this.minScale < 0.5 * (this.fullScale - this.minScale) ? "full" : "fit", t2);
  }
  toggleMax(t2) {
    this.zoomTo(this.targetScale - this.minScale < 0.5 * (this.maxScale - this.minScale) ? "max" : "fit", t2);
  }
  toggleCover(t2) {
    this.zoomTo(this.targetScale - this.minScale < 0.5 * (this.coverScale - this.minScale) ? "cover" : "fit", t2);
  }
  iterateZoom(t2) {
    this.zoomTo("next", t2);
  }
  zoomTo(t2 = 1, { friction: e2 = "auto", originX: i2 = 0, originY: s2 = 0, event: n2 } = {}) {
    if (this.isContentLoading || this.state === x.Destroy)
      return;
    this.stop();
    const { targetScale: o2 } = this;
    let a2 = 1;
    if ("mousemove" === this.panMode && (n2 = this.prevMouseMoveEvent || n2), n2) {
      const t3 = this.content.getBoundingClientRect(), e3 = n2.clientX || 0, o3 = n2.clientY || 0;
      i2 = e3 - t3.left - 0.5 * t3.width, s2 = o3 - t3.top - 0.5 * t3.height;
    }
    const r2 = this.fullScale, h2 = this.maxScale;
    let l2 = this.coverScale;
    "number" == typeof t2 ? a2 = t2 / o2 : ("next" === t2 && (r2 - l2 < 0.2 && (l2 = r2), t2 = o2 < r2 - 1e-5 ? "full" : o2 < h2 - 1e-5 ? "max" : "fit"), a2 = "full" === t2 ? r2 / o2 || 1 : "cover" === t2 ? l2 / o2 || 1 : "max" === t2 ? h2 / o2 || 1 : 1 / o2 || 1), e2 = "auto" === e2 ? a2 > 1 ? 0.15 : 0.25 : e2, this.applyChange({ scale: a2, originX: i2, originY: s2, friction: e2 }), n2 && "mousemove" === this.panMode && this.panWithMouse(n2, e2);
  }
  rotateCCW() {
    this.applyChange({ angle: -90 });
  }
  rotateCW() {
    this.applyChange({ angle: 90 });
  }
  flipX() {
    this.applyChange({ flipX: true });
  }
  flipY() {
    this.applyChange({ flipY: true });
  }
  fitX() {
    this.stop("target");
    const { containerRect: t2, contentRect: e2, target: i2 } = this;
    this.applyChange({ panX: 0.5 * t2.width - (e2.left + 0.5 * e2.fitWidth) - i2.e, panY: 0.5 * t2.height - (e2.top + 0.5 * e2.fitHeight) - i2.f, scale: t2.width / e2.fitWidth / this.targetScale, originX: 0, originY: 0, ignoreBounds: true });
  }
  fitY() {
    this.stop("target");
    const { containerRect: t2, contentRect: e2, target: i2 } = this;
    this.applyChange({ panX: 0.5 * t2.width - (e2.left + 0.5 * e2.fitWidth) - i2.e, panY: 0.5 * t2.height - (e2.top + 0.5 * e2.fitHeight) - i2.f, scale: t2.height / e2.fitHeight / this.targetScale, originX: 0, originY: 0, ignoreBounds: true });
  }
  toggleFS() {
    const { container: t2 } = this, e2 = this.cn("inFullscreen"), i2 = this.cn("htmlHasFullscreen");
    t2.classList.toggle(e2);
    const s2 = t2.classList.contains(e2);
    s2 ? (document.documentElement.classList.add(i2), document.addEventListener("keydown", this.onKeydown, true)) : (document.documentElement.classList.remove(i2), document.removeEventListener("keydown", this.onKeydown, true)), this.updateMetrics(), this.emit(s2 ? "enterFS" : "exitFS");
  }
  getMatrix(t2 = this.current) {
    const { a: e2, b: i2, c: s2, d: n2, e: o2, f: a2 } = t2;
    return new DOMMatrix([e2, i2, s2, n2, o2, a2]);
  }
  reset(t2) {
    if (this.state !== x.Init && this.state !== x.Destroy) {
      this.stop("current");
      for (const t3 of w)
        this.target[t3] = T[t3];
      this.target.a = this.minScale, this.target.d = this.minScale, this.isResting || (this.friction = void 0 === t2 ? this.option("friction") : t2, this.state = x.Panning, this.requestTick());
    }
  }
  destroy() {
    this.stop(), this.state = x.Destroy, this.detachEvents(), this.detachObserver();
    const { container: t2, content: e2 } = this, i2 = this.option("classes") || {};
    for (const e3 of Object.values(i2))
      t2.classList.remove(e3 + "");
    e2 && (e2.removeEventListener("load", this.onLoad), e2.removeEventListener("error", this.onError)), this.detachPlugins();
  }
};
Object.defineProperty(E, "defaults", { enumerable: true, configurable: true, writable: true, value: P }), Object.defineProperty(E, "Plugins", { enumerable: true, configurable: true, writable: true, value: {} });
var z = { viewport: null, track: null, enabled: true, slides: [], axis: "x", transition: "fade", preload: 1, slidesPerPage: "auto", initialPage: 0, friction: 0.12, Panzoom: { decelFriction: 0.12 }, center: true, infinite: true, fill: true, dragFree: false, adaptiveHeight: false, direction: "ltr", classes: { container: "f-carousel", viewport: "f-carousel__viewport", track: "f-carousel__track", slide: "f-carousel__slide", isLTR: "is-ltr", isRTL: "is-rtl", isHorizontal: "is-horizontal", isVertical: "is-vertical", inTransition: "in-transition", isSelected: "is-selected" }, l10n: { NEXT: "Next slide", PREV: "Previous slide", GOTO: "Go to slide #%d" } };
var k;
!function(t2) {
  t2[t2.Init = 0] = "Init", t2[t2.Ready = 1] = "Ready", t2[t2.Destroy = 2] = "Destroy";
}(k || (k = {}));
var R = (t2) => {
  if ("string" == typeof t2 && (t2 = { html: t2 }), !(t2 instanceof String || t2 instanceof HTMLElement)) {
    const e2 = t2.thumb;
    void 0 !== e2 && ("string" == typeof e2 && (t2.thumbSrc = e2), e2 instanceof HTMLImageElement && (t2.thumbEl = e2, t2.thumbElSrc = e2.src, t2.thumbSrc = e2.src), delete t2.thumb);
  }
  return Object.assign({ html: "", el: null, isDom: false, class: "", index: -1, dim: 0, gap: 0, pos: 0, transition: false }, t2);
};
var D = (t2 = {}) => Object.assign({ index: -1, slides: [], dim: 0, pos: -1 }, t2);
var L = class extends u {
  constructor(t2, e2) {
    super(e2), Object.defineProperty(this, "instance", { enumerable: true, configurable: true, writable: true, value: t2 });
  }
  attach() {
  }
  detach() {
  }
};
var A = { classes: { list: "f-carousel__dots", isDynamic: "is-dynamic", hasDots: "has-dots", dot: "f-carousel__dot", isBeforePrev: "is-before-prev", isPrev: "is-prev", isCurrent: "is-current", isNext: "is-next", isAfterNext: "is-after-next" }, dotTpl: '<button type="button" data-carousel-page="%i" aria-label="{{GOTO}}"><span class="f-carousel__dot" aria-hidden="true"></span></button>', dynamicFrom: 11, maxCount: 1 / 0, minCount: 2 };
var C = class extends L {
  constructor() {
    super(...arguments), Object.defineProperty(this, "isDynamic", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "list", { enumerable: true, configurable: true, writable: true, value: null });
  }
  onRefresh() {
    this.refresh();
  }
  build() {
    let t2 = this.list;
    return t2 || (t2 = document.createElement("ul"), r(t2, this.cn("list")), t2.setAttribute("role", "tablist"), this.instance.container.appendChild(t2), r(this.instance.container, this.cn("hasDots")), this.list = t2), t2;
  }
  refresh() {
    var t2;
    const e2 = this.instance.pages.length, i2 = Math.min(2, this.option("minCount")), s2 = Math.max(2e3, this.option("maxCount")), n2 = this.option("dynamicFrom");
    if (e2 < i2 || e2 > s2)
      return void this.cleanup();
    const o2 = "number" == typeof n2 && e2 > 5 && e2 >= n2, a2 = !this.list || this.isDynamic !== o2 || this.list.children.length !== e2;
    a2 && this.cleanup();
    const c2 = this.build();
    if (l(c2, this.cn("isDynamic"), !!o2), a2)
      for (let t3 = 0; t3 < e2; t3++)
        c2.append(this.createItem(t3));
    let d2, u2 = 0;
    for (const e3 of [...c2.children]) {
      const i3 = u2 === this.instance.page;
      i3 && (d2 = e3), l(e3, this.cn("isCurrent"), i3), null === (t2 = e3.children[0]) || void 0 === t2 || t2.setAttribute("aria-selected", i3 ? "true" : "false");
      for (const t3 of ["isBeforePrev", "isPrev", "isNext", "isAfterNext"])
        h(e3, this.cn(t3));
      u2++;
    }
    if (d2 = d2 || c2.firstChild, o2 && d2) {
      const t3 = d2.previousElementSibling, e3 = t3 && t3.previousElementSibling;
      r(t3, this.cn("isPrev")), r(e3, this.cn("isBeforePrev"));
      const i3 = d2.nextElementSibling, s3 = i3 && i3.nextElementSibling;
      r(i3, this.cn("isNext")), r(s3, this.cn("isAfterNext"));
    }
    this.isDynamic = o2;
  }
  createItem(t2 = 0) {
    var e2;
    const i2 = document.createElement("li");
    i2.setAttribute("role", "presentation");
    const s2 = n(this.instance.localize(this.option("dotTpl"), [["%d", t2 + 1]]).replace(/\%i/g, t2 + ""));
    return i2.appendChild(s2), null === (e2 = i2.children[0]) || void 0 === e2 || e2.setAttribute("role", "tab"), i2;
  }
  cleanup() {
    this.list && (this.list.remove(), this.list = null), this.isDynamic = false, h(this.instance.container, this.cn("hasDots"));
  }
  attach() {
    this.instance.on(["refresh", "change"], this.onRefresh);
  }
  detach() {
    this.instance.off(["refresh", "change"], this.onRefresh), this.cleanup();
  }
};
Object.defineProperty(C, "defaults", { enumerable: true, configurable: true, writable: true, value: A });
var j = class extends L {
  constructor() {
    super(...arguments), Object.defineProperty(this, "container", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "prev", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "next", { enumerable: true, configurable: true, writable: true, value: null });
  }
  onRefresh() {
    const t2 = this.instance, e2 = t2.pages.length, i2 = t2.page;
    if (e2 < 2)
      return void this.cleanup();
    this.build();
    let s2 = this.prev, n2 = this.next;
    s2 && n2 && (s2.removeAttribute("disabled"), n2.removeAttribute("disabled"), t2.isInfinite || (i2 <= 0 && s2.setAttribute("disabled", ""), i2 >= e2 - 1 && n2.setAttribute("disabled", "")));
  }
  createButton(t2) {
    const e2 = this.instance, i2 = document.createElement("button");
    i2.setAttribute("tabindex", "0"), i2.setAttribute("title", e2.localize(`{{${t2.toUpperCase()}}}`)), r(i2, this.cn("button") + " " + this.cn("next" === t2 ? "isNext" : "isPrev"));
    const s2 = e2.isRTL ? "next" === t2 ? "prev" : "next" : t2;
    var n2;
    return i2.innerHTML = e2.localize(this.option(`${s2}Tpl`)), i2.dataset[`carousel${n2 = t2, n2 ? n2.match("^[a-z]") ? n2.charAt(0).toUpperCase() + n2.substring(1) : n2 : ""}`] = "true", i2;
  }
  build() {
    let t2 = this.container;
    t2 || (this.container = t2 = document.createElement("div"), r(t2, this.cn("container")), this.instance.container.appendChild(t2)), this.next || (this.next = t2.appendChild(this.createButton("next"))), this.prev || (this.prev = t2.appendChild(this.createButton("prev")));
  }
  cleanup() {
    this.prev && this.prev.remove(), this.next && this.next.remove(), this.container && this.container.remove(), this.prev = null, this.next = null, this.container = null;
  }
  attach() {
    this.instance.on(["refresh", "change"], this.onRefresh);
  }
  detach() {
    this.instance.off(["refresh", "change"], this.onRefresh), this.cleanup();
  }
};
Object.defineProperty(j, "defaults", { enumerable: true, configurable: true, writable: true, value: { classes: { container: "f-carousel__nav", button: "f-button", isNext: "is-next", isPrev: "is-prev" }, nextTpl: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M9 3l9 9-9 9"/></svg>', prevTpl: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M15 3l-9 9 9 9"/></svg>' } });
var I = class extends L {
  constructor() {
    super(...arguments), Object.defineProperty(this, "selectedIndex", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "target", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "nav", { enumerable: true, configurable: true, writable: true, value: null });
  }
  addAsTargetFor(t2) {
    this.target = this.instance, this.nav = t2, this.attachEvents();
  }
  addAsNavFor(t2) {
    this.nav = this.instance, this.target = t2, this.attachEvents();
  }
  attachEvents() {
    this.nav && this.target && (this.nav.options.initialSlide = this.target.options.initialPage, this.nav.on("ready", this.onNavReady), this.nav.state === k.Ready && this.onNavReady(this.nav), this.target.on("ready", this.onTargetReady), this.target.state === k.Ready && this.onTargetReady(this.target));
  }
  onNavReady(t2) {
    t2.on("createSlide", this.onNavCreateSlide), t2.on("Panzoom.click", this.onNavClick), t2.on("Panzoom.touchEnd", this.onNavTouch), this.onTargetChange();
  }
  onTargetReady(t2) {
    t2.on("change", this.onTargetChange), t2.on("Panzoom.refresh", this.onTargetChange), this.onTargetChange();
  }
  onNavClick(t2, e2, i2) {
    i2.pointerType || this.onNavTouch(t2, t2.panzoom, i2);
  }
  onNavTouch(t2, e2, i2) {
    var s2, n2;
    if (Math.abs(e2.dragOffset.x) > 3 || Math.abs(e2.dragOffset.y) > 3)
      return;
    const o2 = i2.target, { nav: a2, target: r2 } = this;
    if (!a2 || !r2 || !o2)
      return;
    const h2 = o2.closest("[data-index]");
    if (i2.stopPropagation(), i2.stopImmediatePropagation(), i2.preventDefault(), !h2)
      return;
    const l2 = parseInt(h2.dataset.index || "", 10) || 0, c2 = r2.getPageForSlide(l2), d2 = a2.getPageForSlide(l2);
    a2.slideTo(d2), r2.slideTo(c2, { friction: null === (n2 = null === (s2 = this.nav) || void 0 === s2 ? void 0 : s2.plugins) || void 0 === n2 ? void 0 : n2.Sync.option("friction") }), this.markSelectedSlide(l2);
  }
  onNavCreateSlide(t2, e2) {
    e2.index === this.selectedIndex && this.markSelectedSlide(e2.index);
  }
  onTargetChange() {
    const { target: t2, nav: e2 } = this;
    if (!t2 || !e2)
      return;
    if (e2.state !== k.Ready || t2.state !== k.Ready)
      return;
    const i2 = t2.pages[t2.page].slides[0].index, s2 = e2.getPageForSlide(i2);
    this.markSelectedSlide(i2), e2.slideTo(s2);
  }
  markSelectedSlide(t2) {
    const { nav: e2 } = this;
    if (!e2 || e2.state !== k.Ready)
      return;
    this.selectedIndex = t2, [...e2.slides].filter((t3) => t3.el && t3.el.classList.remove("is-nav-selected"));
    const i2 = e2.slides[t2];
    i2 && i2.el && i2.el.classList.add("is-nav-selected");
  }
  attach() {
    let t2 = this.options.target, e2 = this.options.nav;
    t2 ? this.addAsNavFor(t2) : e2 && this.addAsTargetFor(e2);
  }
  detach() {
    this.nav && (this.nav.off("ready", this.onNavReady), this.nav.off("createSlide", this.onNavCreateSlide), this.nav.off("Panzoom.click", this.onNavClick), this.nav.off("Panzoom.touchEnd", this.onNavTouch)), this.nav = null, this.target && (this.target.off("ready", this.onTargetReady), this.target.off("refresh", this.onTargetChange), this.target.off("change", this.onTargetChange)), this.target = null;
  }
};
Object.defineProperty(I, "defaults", { enumerable: true, configurable: true, writable: true, value: { friction: 0.35 } });
var F = { Navigation: j, Dots: C, Sync: I };
var H = class extends g {
  get axis() {
    return this.isHorizontal ? "e" : "f";
  }
  get isEnabled() {
    return this.state === k.Ready;
  }
  get isInfinite() {
    let t2 = false;
    const e2 = this.contentDim, i2 = this.viewportDim;
    return this.pages.length >= 2 && e2 > 1.5 * i2 && (t2 = this.option("infinite")), t2;
  }
  get isRTL() {
    return "rtl" === this.option("direction");
  }
  get isHorizontal() {
    return "x" === this.option("axis");
  }
  constructor(t2, e2 = {}, s2 = {}) {
    if (super(), Object.defineProperty(this, "userOptions", { enumerable: true, configurable: true, writable: true, value: {} }), Object.defineProperty(this, "userPlugins", { enumerable: true, configurable: true, writable: true, value: {} }), Object.defineProperty(this, "bp", { enumerable: true, configurable: true, writable: true, value: "" }), Object.defineProperty(this, "state", { enumerable: true, configurable: true, writable: true, value: k.Init }), Object.defineProperty(this, "page", { enumerable: true, configurable: true, writable: true, value: 0 }), Object.defineProperty(this, "prevPage", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "container", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "viewport", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "track", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "slides", { enumerable: true, configurable: true, writable: true, value: [] }), Object.defineProperty(this, "pages", { enumerable: true, configurable: true, writable: true, value: [] }), Object.defineProperty(this, "panzoom", { enumerable: true, configurable: true, writable: true, value: null }), Object.defineProperty(this, "inTransition", { enumerable: true, configurable: true, writable: true, value: /* @__PURE__ */ new Set() }), Object.defineProperty(this, "contentDim", { enumerable: true, configurable: true, writable: true, value: 0 }), Object.defineProperty(this, "viewportDim", { enumerable: true, configurable: true, writable: true, value: 0 }), "string" == typeof t2 && (t2 = document.querySelector(t2)), !t2 || !S(t2))
      throw new Error("No Element found");
    this.container = t2, this.slideNext = i(this.slideNext.bind(this), 150), this.slidePrev = i(this.slidePrev.bind(this), 150), this.userOptions = e2, this.userPlugins = s2, queueMicrotask(() => {
      this.processOptions();
    });
  }
  processOptions() {
    const i2 = e({}, H.defaults, this.userOptions);
    let s2 = "";
    const n2 = i2.breakpoints;
    if (n2 && t(n2))
      for (const [o2, a2] of Object.entries(n2))
        window.matchMedia(o2).matches && t(a2) && (s2 += o2, e(i2, a2));
    s2 === this.bp && this.state !== k.Init || (this.bp = s2, this.state === k.Ready && (i2.initialSlide = this.pages[this.page].slides[0].index), this.state !== k.Init && this.destroy(), super.setOptions(i2), false === this.option("enabled") ? this.attachEvents() : setTimeout(() => {
      this.init();
    }, 0));
  }
  init() {
    this.state = k.Init, this.emit("init"), this.attachPlugins(Object.assign(Object.assign({}, H.Plugins), this.userPlugins)), this.initLayout(), this.initSlides(), this.updateMetrics(), this.setInitialPosition(), this.initPanzoom(), this.attachEvents(), this.state = k.Ready, this.emit("ready");
  }
  initLayout() {
    const { container: t2 } = this, e2 = this.option("classes");
    r(t2, this.cn("container")), l(t2, e2.isLTR, !this.isRTL), l(t2, e2.isRTL, this.isRTL), l(t2, e2.isVertical, !this.isHorizontal), l(t2, e2.isHorizontal, this.isHorizontal);
    let i2 = this.option("viewport") || t2.querySelector(`.${e2.viewport}`);
    i2 || (i2 = document.createElement("div"), r(i2, e2.viewport), i2.append(...s(t2, `.${e2.slide}`)), t2.prepend(i2));
    let n2 = this.option("track") || t2.querySelector(`.${e2.track}`);
    n2 || (n2 = document.createElement("div"), r(n2, e2.track), n2.append(...Array.from(i2.childNodes))), n2.setAttribute("aria-live", "polite"), i2.contains(n2) || i2.prepend(n2), this.viewport = i2, this.track = n2, this.emit("initLayout");
  }
  initSlides() {
    const { track: t2 } = this;
    if (t2) {
      this.slides = [], [...s(t2, `.${this.cn("slide")}`)].forEach((t3) => {
        if (S(t3)) {
          const e2 = R({ el: t3, isDom: true, index: this.slides.length });
          this.slides.push(e2), this.emit("initSlide", e2, this.slides.length);
        }
      });
      for (let t3 of this.option("slides", [])) {
        const e2 = R(t3);
        e2.index = this.slides.length, this.slides.push(e2), this.emit("initSlide", e2, this.slides.length);
      }
      this.emit("initSlides");
    }
  }
  setInitialPage() {
    let t2 = 0;
    const e2 = this.option("initialSlide");
    t2 = "number" == typeof e2 ? this.getPageForSlide(e2) : parseInt(this.option("initialPage", 0) + "", 10) || 0, this.page = t2;
  }
  setInitialPosition() {
    if (!this.track || !this.pages.length)
      return;
    const t2 = this.isHorizontal;
    let e2 = this.page;
    this.pages[e2] || (this.page = e2 = 0);
    const i2 = this.pages[e2].pos * (this.isRTL && t2 ? 1 : -1), s2 = t2 ? `${i2}px` : "0", n2 = t2 ? "0" : `${i2}px`;
    this.track.style.transform = `translate3d(${s2}, ${n2}, 0) scale(1)`, this.option("adaptiveHeight") && this.setViewportHeight();
  }
  initPanzoom() {
    this.panzoom && (this.panzoom.destroy(), this.panzoom = null);
    const t2 = this.option("Panzoom") || {};
    this.panzoom = new E(this.viewport, e({}, { content: this.track, zoom: false, panOnlyZoomed: false, lockAxis: this.isHorizontal ? "x" : "y", infinite: this.isInfinite, click: false, dblClick: false, touch: (t3) => !(this.pages.length < 2 && !t3.options.infinite), bounds: () => this.getBounds(), maxVelocity: (t3) => Math.abs(t3.target[this.axis] - t3.current[this.axis]) < 2 * this.viewportDim ? 100 : 0 }, t2)), this.panzoom.on("*", (t3, e2, ...i2) => {
      this.emit(`Panzoom.${e2}`, t3, ...i2);
    }), this.panzoom.on("decel", this.onDecel), this.panzoom.on("refresh", this.onRefresh), this.panzoom.on("beforeTransform", this.onBeforeTransform), this.panzoom.on("endAnimation", this.onEndAnimation);
  }
  attachEvents() {
    const t2 = this.container;
    t2 && (t2.addEventListener("click", this.onClick, { passive: false, capture: false }), t2.addEventListener("slideTo", this.onSlideTo)), window.addEventListener("resize", this.onResize);
  }
  createPages() {
    let t2 = [];
    const { contentDim: e2, viewportDim: i2 } = this, s2 = this.option("slidesPerPage");
    if ("number" == typeof s2 && e2 > i2) {
      for (let e3 = 0; e3 < this.slides.length; e3 += s2)
        t2.push(D({ index: e3, slides: this.slides.slice(e3, e3 + s2) }));
      return t2;
    }
    let n2 = 0, o2 = 0;
    for (const e3 of this.slides)
      (!t2.length || o2 + e3.dim > i2) && (t2.push(D()), n2 = t2.length - 1, o2 = 0), o2 += e3.dim + e3.gap, t2[n2].slides.push(e3);
    return t2;
  }
  processPages() {
    const t2 = this.pages, { contentDim: e2, viewportDim: i2 } = this, s2 = this.option("center"), n2 = this.option("fill"), a2 = n2 && s2 && e2 > i2 && !this.isInfinite;
    if (t2.forEach((t3, n3) => {
      t3.index = n3, t3.pos = t3.slides[0].pos, t3.dim = 0;
      for (const [e3, i3] of t3.slides.entries())
        t3.dim += i3.dim, e3 < t3.slides.length - 1 && (t3.dim += i3.gap);
      a2 && t3.pos + 0.5 * t3.dim < 0.5 * i2 ? t3.pos = 0 : a2 && t3.pos + 0.5 * t3.dim >= e2 - 0.5 * i2 ? t3.pos = e2 - i2 : s2 && (t3.pos += -0.5 * (i2 - t3.dim));
    }), t2.forEach((t3, s3) => {
      n2 && !this.isInfinite && e2 > i2 && (t3.pos = Math.max(t3.pos, 0), t3.pos = Math.min(t3.pos, e2 - i2)), t3.pos = o(t3.pos, 1e3), t3.dim = o(t3.dim, 1e3), t3.pos < 0.1 && t3.pos > -0.1 && (t3.pos = 0);
    }), this.isInfinite)
      return t2;
    const r2 = [];
    let h2;
    return t2.forEach((t3) => {
      const e3 = Object.assign({}, t3);
      h2 && e3.pos === h2.pos ? (h2.dim += e3.dim, h2.slides = [...h2.slides, ...e3.slides]) : (e3.index = r2.length, h2 = e3, r2.push(e3));
    }), r2;
  }
  getPageFromIndex(t2 = 0) {
    const e2 = this.pages.length;
    let i2;
    return t2 = parseInt((t2 || 0).toString()) || 0, i2 = this.isInfinite ? (t2 % e2 + e2) % e2 : Math.max(Math.min(t2, this.pages.length - 1), 0), i2;
  }
  getSlideMetrics(t2) {
    const e2 = this.isHorizontal ? "width" : "height";
    let i2 = 0, s2 = 0, n2 = t2.el;
    n2 ? i2 = parseFloat(n2.dataset[e2] || "") || 0 : (n2 = document.createElement("div"), n2.style.visibility = "hidden", r(n2, this.cn("slide") + " " + t2.class), (this.track || document.body).prepend(n2)), i2 ? (n2.style[e2] = `${i2}px`, n2.style["width" === e2 ? "height" : "width"] = "") : i2 = n2.getBoundingClientRect()[e2];
    const a2 = getComputedStyle(n2);
    return "content-box" === a2.boxSizing && (this.isHorizontal ? (i2 += parseFloat(a2.paddingLeft) || 0, i2 += parseFloat(a2.paddingRight) || 0) : (i2 += parseFloat(a2.paddingTop) || 0, i2 += parseFloat(a2.paddingBottom) || 0)), s2 = parseFloat(a2[this.isHorizontal ? "marginRight" : "marginBottom"]) || 0, this.isHorizontal, t2.el || n2.remove(), { dim: o(i2, 1e3), gap: o(s2, 1e3) };
  }
  getBounds() {
    let t2 = { min: 0, max: 0 };
    if (this.isInfinite)
      t2 = { min: -1 / 0, max: 1 / 0 };
    else if (this.pages.length) {
      const e2 = this.pages[0].pos, i2 = this.pages[this.pages.length - 1].pos;
      t2 = this.isRTL && this.isHorizontal ? { min: e2, max: i2 } : { min: -1 * i2, max: -1 * e2 };
    }
    return { x: this.isHorizontal ? t2 : { min: 0, max: 0 }, y: this.isHorizontal ? { min: 0, max: 0 } : t2 };
  }
  repositionSlides() {
    const { viewportDim: t2, contentDim: e2, page: i2, pages: s2 } = this;
    let n2, a2 = 0, r2 = 0, h2 = 0, l2 = 0;
    this.panzoom ? l2 = -1 * this.panzoom.current[this.isHorizontal ? "e" : "f"] : s2[i2] && (l2 = s2[i2].pos || 0), n2 = this.isHorizontal ? this.isRTL ? "right" : "left" : "top", this.isRTL && this.isHorizontal && (l2 *= -1);
    for (const t3 of this.slides)
      t3.el ? ("top" === n2 ? (t3.el.style.right = "", t3.el.style.left = "") : t3.el.style.top = "", t3.index !== a2 ? t3.el.style[n2] = 0 === r2 ? "" : `${o(r2, 1e3)}px` : t3.el.style[n2] = "", h2 += t3.dim + t3.gap, a2++) : r2 += t3.dim + t3.gap;
    if (this.isInfinite && h2)
      for (const i3 of this.slides)
        i3.el && (o(i3.pos) < o(t2) && o(i3.pos + i3.dim + i3.gap) < o(l2) && o(l2) > o(e2 - t2) && (i3.el.style[n2] = `${o(r2 + h2, 1e3)}px`), o(i3.pos + i3.gap) >= o(e2 - t2) && o(i3.pos) > o(l2 + t2) && o(l2) < o(t2) && (i3.el.style[n2] = `-${o(h2, 1e3)}px`));
    let c2, d2, u2 = [...this.inTransition];
    if (u2.length > 1 && (c2 = this.pages[u2[0]], d2 = this.pages[u2[1]]), c2 && d2) {
      let t3 = 0;
      for (const e3 of this.slides)
        e3.el ? this.inTransition.has(e3.index) && c2.slides.indexOf(e3) < 0 && (e3.el.style[n2] = `${o(t3 + (c2.pos - d2.pos), 1e3)}px`) : t3 += e3.dim + e3.gap;
    }
  }
  createSlideEl(t2) {
    if (!this.track || !t2)
      return;
    if (t2.el)
      return;
    const e2 = document.createElement("div");
    r(e2, this.cn("slide")), r(e2, t2.class), r(e2, t2.customClass), t2.html && (e2.innerHTML = t2.html);
    const i2 = [];
    this.slides.forEach((t3, e3) => {
      t3.el && i2.push(e3);
    });
    const s2 = t2.index;
    let n2 = null;
    if (i2.length) {
      let t3 = i2.reduce((t4, e3) => Math.abs(e3 - s2) < Math.abs(t4 - s2) ? e3 : t4);
      n2 = this.slides[t3];
    }
    const o2 = n2 && n2.el ? n2.index < t2.index ? n2.el.nextSibling : n2.el : null;
    this.track.insertBefore(e2, this.track.contains(o2) ? o2 : null), t2.el = e2, this.emit("createSlide", t2);
  }
  removeSlideEl(t2, e2 = false) {
    const i2 = t2.el;
    if (!i2)
      return;
    if (h(i2, this.cn("isSelected")), t2.isDom && !e2)
      return void (i2.style.left = "");
    this.emit("removeSlide", t2);
    const s2 = new CustomEvent("animationend");
    i2.dispatchEvent(s2), t2.el && t2.el.remove(), t2.el = null;
  }
  transitionTo(t2 = 0, e2 = this.option("transition")) {
    if (!e2)
      return false;
    const { pages: i2, panzoom: s2 } = this;
    t2 = parseInt((t2 || 0).toString()) || 0;
    const n2 = this.getPageFromIndex(t2);
    if (!s2 || !i2[n2] || i2.length < 2 || i2[this.page].slides[0].dim < this.viewportDim)
      return false;
    const a2 = t2 > this.page ? 1 : -1, h2 = this.pages[n2].pos * (this.isRTL ? 1 : -1);
    if (this.page === n2 && o(h2, 1e3) === o(s2.target[this.axis], 1e3))
      return false;
    this.clearTransitions();
    const l2 = s2.isResting;
    r(this.container, this.cn("inTransition"));
    const c2 = this.pages[this.page].slides[0], d2 = this.pages[n2].slides[0];
    this.inTransition.add(d2.index), this.createSlideEl(d2);
    let u2 = c2.el, g2 = d2.el;
    l2 || "slide" === e2 || (e2 = "fadeFast", u2 = null);
    const p2 = this.isRTL ? "next" : "prev", f2 = this.isRTL ? "prev" : "next";
    return u2 && (this.inTransition.add(c2.index), c2.transition = e2, u2.addEventListener("animationend", this.onAnimationEnd), u2.classList.add(`f-${e2}Out`, `to-${a2 > 0 ? f2 : p2}`)), g2 && (d2.transition = e2, g2.addEventListener("animationend", this.onAnimationEnd), g2.classList.add(`f-${e2}In`, `from-${a2 > 0 ? p2 : f2}`)), s2.panTo({ x: this.isHorizontal ? h2 : 0, y: this.isHorizontal ? 0 : h2, friction: 0 }), this.onChange(n2), true;
  }
  manageSlideVisiblity() {
    const t2 = /* @__PURE__ */ new Set(), e2 = /* @__PURE__ */ new Set(), i2 = this.getVisibleSlides(parseFloat(this.option("preload", 0) + "") || 0);
    for (const s2 of this.slides)
      i2.has(s2) ? t2.add(s2) : e2.add(s2);
    for (const e3 of this.inTransition)
      t2.add(this.slides[e3]);
    for (const e3 of t2)
      this.createSlideEl(e3), this.lazyLoadSlide(e3);
    for (const i3 of e2)
      t2.has(i3) || this.removeSlideEl(i3);
    this.markSelectedSlides(), this.repositionSlides();
  }
  markSelectedSlides() {
    if (!this.pages[this.page] || !this.pages[this.page].slides)
      return;
    const t2 = "aria-hidden";
    let e2 = this.cn("isSelected");
    if (e2)
      for (const i2 of this.slides)
        i2.el && (i2.el.dataset.index = `${i2.index}`, this.pages[this.page].slides.includes(i2) ? (i2.el.classList.contains(e2) || (r(i2.el, e2), this.emit("selectSlide", i2)), i2.el.removeAttribute(t2)) : (i2.el.classList.contains(e2) && (h(i2.el, e2), this.emit("unselectSlide", i2)), i2.el.setAttribute(t2, "true")));
  }
  flipInfiniteTrack() {
    const t2 = this.panzoom;
    if (!t2 || !this.isInfinite)
      return;
    const e2 = "x" === this.option("axis") ? "e" : "f", { viewportDim: i2, contentDim: s2 } = this;
    let n2 = t2.current[e2], o2 = t2.target[e2] - n2, a2 = 0, r2 = 0.5 * i2, h2 = s2;
    this.isRTL && this.isHorizontal ? (n2 < -r2 && (a2 = -1, n2 += h2), n2 > h2 - r2 && (a2 = 1, n2 -= h2)) : (n2 > r2 && (a2 = 1, n2 -= h2), n2 < -h2 + r2 && (a2 = -1, n2 += h2)), a2 && (t2.current[e2] = n2, t2.target[e2] = n2 + o2);
  }
  lazyLoadSlide(t2) {
    const e2 = this, i2 = t2 && t2.el;
    if (!i2)
      return;
    const s2 = /* @__PURE__ */ new Set();
    i2.querySelectorAll("[data-lazy-srcset]").forEach((t3) => {
      t3 instanceof HTMLImageElement && s2.add(t3);
    }), i2.querySelectorAll("[data-lazy-src]").forEach((t3) => {
      t3 instanceof HTMLImageElement ? s2.add(t3) : S(t3) && (t3.style.backgroundImage = `url('${t3.dataset.lazySrc || ""}')`);
    });
    const o2 = (t3, i3, s3) => {
      s3 && (s3.remove(), s3 = null), i3.complete && (i3.style.display = ""), this.option("adaptiveHeight") && t3.el && this.pages[this.page].slides.indexOf(t3) > -1 && e2.setViewportHeight();
    };
    for (const e3 of s2) {
      let i3 = null;
      e3.src = e3.dataset.lazySrcset || e3.dataset.lazySrc || "", delete e3.dataset.lazySrc, delete e3.dataset.lazySrcset, e3.style.display = "none", e3.addEventListener("error", () => {
        o2(t2, e3, i3);
      }), e3.addEventListener("load", () => {
        o2(t2, e3, i3);
      }), setTimeout(() => {
        e3.parentNode && t2.el && (e3.complete ? o2(t2, e3, i3) : (i3 = n(c), e3.parentNode.insertBefore(i3, e3)));
      }, 300);
    }
    let a2 = i2.dataset.lazySrc;
    a2 && a2.length && (i2.style.backgroundImage = `url('${a2}')`);
  }
  clearTransitions() {
    this.inTransition.clear(), h(this.container, this.cn("inTransition"));
    const t2 = ["to-prev", "to-next", "from-prev", "from-next"];
    for (const e2 of this.slides) {
      const i2 = e2.el;
      if (i2) {
        i2.removeEventListener("animationend", this.onAnimationEnd), i2.classList.remove(...t2);
        const s2 = e2.transition;
        s2 && i2.classList.remove(`f-${s2}Out`, `f-${s2}In`);
      }
    }
    this.manageSlideVisiblity();
  }
  onAnimationEnd(t2) {
    const e2 = t2.target, i2 = e2 ? parseInt(e2.dataset.index || "", 10) || 0 : -1, s2 = this.slides[i2], n2 = t2.animationName;
    if (!e2 || !s2 || !n2)
      return;
    const o2 = !!this.inTransition.has(i2) && s2.transition;
    o2 && n2.substring(0, o2.length + 2) === `f-${o2}` && this.inTransition.delete(i2), this.inTransition.size || this.clearTransitions(), i2 === this.page && this.emit("settle");
  }
  onDecel(t2, e2 = 0, i2 = 0, s2 = 0, n2 = 0) {
    const o2 = this.isRTL, a2 = this.isHorizontal, r2 = this.axis, h2 = this.pages.length, l2 = Math.abs(Math.atan2(i2, e2) / (Math.PI / 180));
    let c2 = 0;
    if (c2 = l2 > 45 && l2 < 135 ? a2 ? 0 : i2 : a2 ? e2 : 0, !h2)
      return;
    const d2 = this.option("dragFree");
    let u2 = this.page;
    const g2 = t2.target[r2] * (this.isRTL && a2 ? 1 : -1), { pageIndex: p2 } = this.getPageFromPosition(g2), f2 = t2.current[r2] * (o2 && a2 ? 1 : -1);
    let { page: m2 } = this.getPageFromPosition(f2);
    d2 ? this.onChange(p2) : (Math.abs(c2) > 5 ? (Math.max(Math.abs(s2), Math.abs(n2)) > this.pages[u2].slides[0].dim && (console.log(`yes? targetPage: ${p2}; currentPage: ${m2}`), u2 = m2), u2 = o2 && a2 ? c2 < 0 ? u2 - 1 : u2 + 1 : c2 < 0 ? u2 + 1 : u2 - 1) : u2 = m2, this.slideTo(u2, { transition: false, friction: t2.option("decelFriction") }));
  }
  onClick(t2) {
    const e2 = t2.target, i2 = e2 && S(e2) ? e2.dataset : null;
    let s2, n2;
    i2 && (void 0 !== i2.carouselPage ? (n2 = "slideTo", s2 = i2.carouselPage) : void 0 !== i2.carouselNext ? n2 = "slideNext" : void 0 !== i2.carouselPrev && (n2 = "slidePrev")), n2 ? (t2.preventDefault(), t2.stopPropagation(), e2 && !e2.hasAttribute("disabled") && this[n2](s2)) : this.emit("click", t2);
  }
  onSlideTo(t2) {
    const e2 = t2.detail || 0;
    this.slideTo(this.getPageForSlide(e2), { friction: 0 });
  }
  onChange(t2, e2 = 0) {
    const i2 = this.page;
    this.prevPage = i2, this.page = t2, this.option("adaptiveHeight") && this.setViewportHeight(), t2 !== i2 && (this.markSelectedSlides(), this.emit("change", t2, i2, e2));
  }
  onRefresh(t2, e2 = "") {
    let i2 = this.contentDim, s2 = this.viewportDim;
    this.updateMetrics(), this.contentDim === i2 && this.viewportDim === s2 || this.slideTo(this.page, { friction: 0, transition: false });
  }
  onResize() {
    this.option("breakpoints") && this.processOptions();
  }
  onBeforeTransform() {
    this.flipInfiniteTrack(), this.manageSlideVisiblity();
  }
  onEndAnimation() {
    this.emit("settle");
  }
  reInit(t2 = null, e2 = null) {
    this.destroy(), this.state = k.Init, this.userOptions = t2 || this.userOptions, this.userPlugins = e2 || this.userPlugins, this.processOptions();
  }
  slideTo(t2 = 0, { friction: e2 = this.option("friction"), transition: i2 = this.option("transition") } = {}) {
    if (this.state === k.Destroy)
      return;
    const s2 = this.panzoom, n2 = this.pages.length;
    if (!s2 || !n2)
      return;
    if (this.transitionTo(t2, i2))
      return;
    const o2 = this.axis, a2 = this.getPageFromIndex(t2);
    let r2 = this.pages[a2].pos, h2 = 0;
    if (this.isInfinite) {
      const t3 = s2.current[o2] * (this.isRTL && this.isHorizontal ? 1 : -1), e3 = this.contentDim, i3 = r2 + e3, n3 = r2 - e3;
      Math.abs(t3 - i3) < Math.abs(t3 - r2) && (r2 = i3, h2 = 1), Math.abs(t3 - n3) < Math.abs(t3 - r2) && (r2 = n3, h2 = -1);
    }
    r2 *= this.isRTL && this.isHorizontal ? 1 : -1, Math.abs(s2.target[o2] - r2) < 0.1 || (s2.panTo({ x: this.isHorizontal ? r2 : 0, y: this.isHorizontal ? 0 : r2, friction: e2 }), this.onChange(a2, h2));
  }
  slideToClosest(t2) {
    if (this.panzoom) {
      const { pageIndex: e2 } = this.getPageFromPosition(this.panzoom.current[this.isHorizontal ? "e" : "f"]);
      this.slideTo(e2, t2);
    }
  }
  slideNext() {
    this.slideTo(this.page + 1);
  }
  slidePrev() {
    this.slideTo(this.page - 1);
  }
  prependSlide(t2) {
    var e2, i2;
    let s2 = Array.isArray(t2) ? t2 : [t2];
    for (const t3 of s2.reverse())
      this.slides.unshift(R(t3));
    for (let t3 = 0; t3 < this.slides.length; t3++)
      this.slides[t3].index = t3;
    const n2 = (null === (e2 = this.pages[this.page]) || void 0 === e2 ? void 0 : e2.pos) || 0;
    this.page += s2.length, this.updateMetrics();
    const o2 = (null === (i2 = this.pages[this.page]) || void 0 === i2 ? void 0 : i2.pos) || 0;
    if (this.panzoom) {
      const t3 = this.isRTL ? n2 - o2 : o2 - n2;
      this.panzoom.target.e -= t3, this.panzoom.current.e -= t3, this.panzoom.requestTick();
    }
  }
  appendSlide(t2) {
    let e2 = Array.isArray(t2) ? t2 : [t2];
    for (const t3 of e2) {
      const e3 = R(t3);
      e3.index = this.slides.length, this.slides.push(e3), this.emit("initSlide", t3, this.slides.length);
    }
    this.updateMetrics();
  }
  removeSlide(t2) {
    const e2 = this.slides.length;
    t2 = (t2 % e2 + e2) % e2, this.removeSlideEl(this.slides[t2], true), this.slides.splice(t2, 1);
    for (let t3 = 0; t3 < this.slides.length; t3++)
      this.slides[t3].index = t3;
    this.updateMetrics(), this.slideTo(this.page, { friction: 0, transition: false });
  }
  updateMetrics() {
    const t2 = this.panzoom;
    if (!this.track)
      return;
    const e2 = "e" === this.axis ? "width" : "height";
    let i2, s2 = this.pages.length, n2 = 0;
    for (const [t3, e3] of this.slides.entries()) {
      let s3 = 0, a3 = 0;
      !e3.el && i2 ? (s3 = i2.dim, a3 = i2.gap) : ({ dim: s3, gap: a3 } = this.getSlideMetrics(e3), i2 = e3), s3 = o(s3, 1e3), a3 = o(a3, 1e3), e3.dim = s3, e3.gap = a3, e3.pos = n2, n2 += s3, (this.isInfinite || t3 < this.slides.length - 1) && (n2 += a3);
    }
    this.viewport && (this.viewportDim = o(this.viewport.getBoundingClientRect()[e2], 1e3));
    const a2 = this.contentDim;
    this.contentDim = n2, t2 && (t2.contentRect[e2] = n2, t2.contentRect["e" === this.axis ? "fullWidth" : "fullHeight"] = n2), this.pages = this.createPages(), this.pages = this.processPages(), this.state === k.Init && this.setInitialPage(), this.page = Math.max(0, Math.min(this.page, this.pages.length - 1)), t2 && s2 === this.pages.length && n2 !== a2 && (t2.target[this.axis] = -1 * this.pages[this.page].pos, t2.current[this.axis] = -1 * this.pages[this.page].pos, t2.stop()), this.manageSlideVisiblity(), this.emit("refresh");
  }
  setViewportHeight() {
    const { page: t2, pages: e2, viewport: i2, isHorizontal: s2 } = this;
    if (!i2 || !e2[t2])
      return;
    let n2 = 0;
    s2 && this.track && (this.track.style.height = "auto", e2[t2].slides.forEach((t3) => {
      t3.el && (n2 = Math.max(n2, t3.el.offsetHeight));
    })), i2.style.height = n2 ? `${n2}px` : "";
  }
  getPageForSlide(t2) {
    for (const e2 of this.pages)
      for (const i2 of e2.slides)
        if (i2.index === t2)
          return e2.index;
    return -1;
  }
  getVisibleSlides(t2 = 0) {
    var e2;
    const i2 = /* @__PURE__ */ new Set();
    let { contentDim: s2, viewportDim: n2, pages: o2, page: a2 } = this;
    s2 = s2 + (null === (e2 = this.slides[this.slides.length - 1]) || void 0 === e2 ? void 0 : e2.gap) || 0;
    let r2 = 0;
    r2 = this.panzoom ? -1 * this.panzoom.current[this.axis] : o2[a2] && o2[a2].pos || 0, this.isInfinite && (r2 -= Math.floor(r2 / s2) * s2), this.isRTL && this.isHorizontal && (r2 *= -1);
    const h2 = r2 - n2 * t2, l2 = r2 + n2 * (t2 + 1), c2 = this.isInfinite ? [-1, 0, 1] : [0];
    for (const t3 of this.slides)
      for (const e3 of c2) {
        const n3 = t3.pos + e3 * s2, o3 = t3.pos + t3.dim + t3.gap + e3 * s2;
        n3 < l2 && o3 > h2 && i2.add(t3);
      }
    return i2;
  }
  getPageFromPosition(t2) {
    const { viewportDim: e2, contentDim: i2 } = this, s2 = this.pages.length, n2 = this.slides.length, o2 = this.slides[n2 - 1];
    let a2 = 0, r2 = 0, h2 = 0;
    const l2 = this.option("center");
    l2 && (t2 += 0.5 * e2), this.isInfinite || (t2 = Math.max(this.slides[0].pos, Math.min(t2, o2.pos)));
    const c2 = i2 + o2.gap;
    h2 = Math.floor(t2 / c2) || 0, t2 -= h2 * c2;
    let d2 = o2, u2 = this.slides.find((e3) => {
      const i3 = t2 + (d2 && !l2 ? 0.5 * d2.dim : 0);
      return d2 = e3, e3.pos <= i3 && e3.pos + e3.dim + e3.gap > i3;
    });
    return u2 || (u2 = o2), r2 = this.getPageForSlide(u2.index), a2 = r2 + h2 * s2, { page: a2, pageIndex: r2, interval: h2 };
  }
  destroy() {
    if ([k.Destroy].includes(this.state))
      return;
    this.state = k.Destroy;
    const { container: t2, viewport: e2, track: i2, slides: s2, panzoom: n2 } = this, o2 = this.option("classes");
    t2.removeEventListener("click", this.onClick, { passive: false, capture: false }), t2.removeEventListener("slideTo", this.onSlideTo), window.removeEventListener("resize", this.onResize), n2 && (n2.destroy(), this.panzoom = null), s2 && s2.forEach((t3) => {
      this.removeSlideEl(t3);
    }), this.detachPlugins(), this.track = null, this.viewport = null, this.page = 0, e2 && i2 && e2.replaceWith(...i2.childNodes);
    for (const [e3, i3] of Object.entries(o2))
      "container" !== e3 && i3 && t2.classList.remove(i3);
    this.slides = [];
    const a2 = this.events.get("ready");
    this.events = /* @__PURE__ */ new Map(), a2 && this.events.set("ready", a2);
  }
};
Object.defineProperty(H, "Panzoom", { enumerable: true, configurable: true, writable: true, value: E }), Object.defineProperty(H, "defaults", { enumerable: true, configurable: true, writable: true, value: z }), Object.defineProperty(H, "Plugins", { enumerable: true, configurable: true, writable: true, value: F });
export {
  H as Carousel
};
//# sourceMappingURL=@fancyapps_ui_dist_carousel_carousel__esm__js.js.map
